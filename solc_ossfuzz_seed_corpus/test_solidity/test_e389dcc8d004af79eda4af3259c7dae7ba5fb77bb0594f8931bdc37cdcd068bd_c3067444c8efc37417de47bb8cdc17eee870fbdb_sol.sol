
==== Source: su0.sol ====
function f0()     returns(int240 o0)
{
  (int240 l0) = f0();
  assembly
  {
    for 
    {
      revert(o0, 115792089237316195423570985008687907853269984665640564039457584007913129639935)
    }
    l0
    {
      pop(o0)
    }
    {
      if o0
      {
        break
        o0 := o0
        o0 := mload(mod(balance(115792089237316195423570985008687907853269984665640564039457584007913129639935), 2048))
      }
    }
    for 
    {
      switch 43433276501331199954491433274107813736792776107487434325487445765997744112216
      case 108139176472125722080402437640585012648405929435649008553699242889771379652485
      {
        pop(o0)
        l0 := 41568265352468633362364252375744811779311614545927020609804053070149835654562
      }
    }
    l0
    {
      return(l0, l0)
    }
    {
      continue
      continue
    }
  }
}
pragma solidity >= 0.0.0;
address constant cons0 = ((true || true) ? 0x0000000000000000000000000000000000000000 : 0x0000000000000000000000000000000000000000);
library L0 {
  uint176 public constant cons1 = uint176(((((((uint176(95780971304118053647396689196894323976171195136475135) >> uint112(uint112(0))) | uint176(0)) ** uint104(uint104(20282409603651670423947251286015))) % uint176(29323711021567900424954611894312101171139370719933244)) % uint176(26293380174391780997495932180055341098725487799916022)) / uint176(0)));
  type T0 is int32;
  event ev0(L0.T0  ep0, function (L0.T0, bytes16, uint192) external   returns (int232, function (bool, bytes7, string memory) external   returns (address payable)[] memory, address payable)  ep1);
}
struct St0 {
  bytes21 el0;
  uint224 el1;
}
contract C0 {
  error er0(L0.T0 ep0);
  uint64 public constant cons2 = ((((uint64(((uint64(4730872411373494345) ** uint160(uint160(32582373848664118921182361662690855724113071738))) / uint64(0))) >> uint256(uint256(61700061339917054076535163128066568761136949404977960550487853459654104937913))) >> uint88(uint88(18880613476150994963543734))) & uint64(13460948032547390240)) >> uint224(uint224(10977199461370579330950501937190082988676765858692870774629093194900)));
  event ev1(function (St0 memory, bytes27, string memory) external   indexed ep0, int8 indexed ep1, int120 indexed ep2);
  error er1();
  modifier m0() 
  {
    (int240 l0) = f0();
    _;
    revert(string("6932ffffffffffffffffffffff"));
  }
  uint160   s0 = uint160(723785167654178150874971709527085429385512946004);
  using L0 for *;
  function f1() external virtual m0() payable returns(uint48[1] memory o0)
  {
  }
  enum EN0 {
    M0, M1, M2, M3, M4, M5, M6, M7,
    M8, M9, M10, M11, M12, M13, M14, M15,
    M16, M17, M18, M19, M20, M21, M22, M23,
    M24, M25, M26, M27, M28, M29, M30, M31,
    M32, M33, M34, M35, M36, M37, M38, M39,
    M40, M41, M42, M43, M44, M45, M46, M47,
    M48, M49, M50, M51, M52, M53, M54, M55,
    M56, M57, M58, M59, M60, M61, M62, M63,
    M64, M65, M66, M67, M68, M69, M70, M71,
    M72, M73, M74, M75, M76, M77, M78, M79,
    M80, M81, M82, M83, M84, M85, M86, M87,
    M88, M89, M90, M91, M92, M93, M94, M95,
    M96, M97, M98, M99, M100, M101, M102, M103,
    M104, M105, M106, M107, M108, M109, M110, M111,
    M112, M113, M114, M115, M116, M117, M118, M119,
    M120, M121, M122, M123, M124, M125, M126, M127,
    M128, M129, M130, M131, M132, M133, M134, M135,
    M136, M137, M138, M139, M140, M141, M142, M143,
    M144, M145, M146, M147, M148, M149, M150, M151,
    M152, M153, M154, M155, M156, M157, M158, M159,
    M160, M161, M162, M163, M164, M165, M166, M167,
    M168, M169, M170, M171, M172, M173, M174, M175,
    M176, M177, M178, M179, M180, M181, M182, M183,
    M184, M185, M186, M187, M188, M189, M190, M191,
    M192, M193, M194, M195, M196, M197, M198, M199,
    M200, M201, M202, M203, M204, M205, M206, M207,
    M208, M209, M210, M211, M212, M213, M214, M215,
    M216, M217, M218, M219, M220, M221, M222, M223,
    M224, M225, M226, M227, M228, M229, M230, M231,
    M232, M233, M234, M235, M236, M237, M238, M239,
    M240, M241
  }
}
// ====
// ----

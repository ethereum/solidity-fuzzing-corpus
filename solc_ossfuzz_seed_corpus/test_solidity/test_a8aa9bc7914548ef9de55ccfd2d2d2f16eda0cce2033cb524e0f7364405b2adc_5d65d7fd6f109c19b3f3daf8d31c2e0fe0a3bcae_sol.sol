
==== Source: su0.sol ====
type T0 is int208;
pragma solidity >= 0.0.0;
function f0()     returns(bytes10 o0)
{
  assembly
  {
    for 
    {
    }
    mload(mod(o0, 2048))
    {
      for 
      {
      }
      46783727927654019645522834177712077378774204085820799350926168846518131370021
      {
      }
      {
        switch 58292067981380684938224080415574520686120197704501069454595102461912247307373
        default
        {
          for 
          {
          }
          o0
          {
            o0 := 115792089237316195423570985008687907853269984665640564039457584007913129639935
          }
          {
            let al0 := o0
            for 
            {
              return(82834338863379214306360828293355182590403250470183597101747923748204983045241, o0)
            }
            o0
            {
              if 2531029440631204811888224531572165602797937343653821684647428932879988337504
              {
                switch mload(mod(al0, 2048))
                default
                {
                }
                o0 := o0
                return(iszero(mload(mod(0, 2048))), o0)
              }
            }
            {
              switch al0
              default
              {
                o0 := 115792089237316195423570985008687907853269984665640564039457584007913129639935
              }
            }
            o0 := o0
            if mload(mod(al0, 2048))
            {
              let al1 := calldataload(mod(115792089237316195423570985008687907853269984665640564039457584007913129639935, calldatasize()))
            }
          }
          switch 102365615263060189653365197579061853082206569008282018204797346231234773076260
          case 262116756319676243340944313081192856662474603495213449868937945945231024399
          {
            pop(o0)
            if 16400450229890119017074757966460790586128506349129215638570833183859586903619
            {
            }
          }
          case 0
          {
            o0 := mload(mod(o0, 2048))
            let al2 := o0
          }
          o0 := coinbase()
        }
      }
      let al3 := 5674392694754827632147326729139694457637499004067311010089033433593064154700
    }
    {
    }
  }
  if (false)
  {
  }
  else
  {
    (bytes10 l0) = f0();
    assembly
    {
      if l0
      {
        {
          mstore(mod(o0, 2048), l0)
        }
        l0 := mload(mod(mload(mod(115792089237316195423570985008687907853269984665640564039457584007913129639935, 2048)), 2048))
        let al4 := 0
      }
      let al5 := o0
    }
  }
}
library L0 {
  bool public constant cons0 = false;
  using L0 for *;
  bytes13 public constant cons1 = bytes13(0x00000000000000000000000000);
  modifier m0() 
  {
    _;
  }
}
// ====
// ----

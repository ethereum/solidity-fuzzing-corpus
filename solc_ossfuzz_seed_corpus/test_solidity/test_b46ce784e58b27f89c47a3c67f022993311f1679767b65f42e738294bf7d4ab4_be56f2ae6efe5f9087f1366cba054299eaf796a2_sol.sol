
==== Source: su0.sol ====
enum EN0 {
  M0, M1, M2, M3, M4, M5, M6, M7,
  M8, M9, M10, M11, M12, M13, M14, M15,
  M16, M17, M18, M19, M20, M21, M22, M23,
  M24, M25, M26, M27, M28, M29, M30, M31,
  M32, M33, M34, M35, M36, M37, M38, M39,
  M40, M41, M42, M43, M44, M45, M46, M47,
  M48, M49, M50, M51, M52, M53, M54, M55,
  M56, M57, M58, M59, M60, M61, M62, M63,
  M64, M65, M66, M67, M68, M69, M70, M71,
  M72, M73, M74, M75, M76, M77, M78, M79,
  M80, M81, M82, M83, M84, M85, M86, M87,
  M88, M89, M90, M91, M92, M93, M94, M95,
  M96, M97, M98, M99, M100, M101, M102, M103,
  M104, M105, M106, M107, M108, M109, M110, M111,
  M112, M113, M114, M115, M116, M117, M118, M119,
  M120, M121, M122, M123, M124, M125, M126, M127,
  M128, M129, M130, M131, M132, M133, M134, M135,
  M136, M137, M138, M139, M140, M141, M142, M143,
  M144, M145, M146, M147, M148, M149, M150, M151,
  M152, M153, M154, M155, M156, M157, M158, M159,
  M160, M161, M162, M163, M164, M165, M166, M167,
  M168, M169, M170, M171, M172, M173, M174, M175,
  M176, M177, M178, M179, M180, M181, M182, M183,
  M184, M185, M186, M187, M188, M189, M190, M191,
  M192, M193, M194, M195, M196, M197, M198, M199,
  M200, M201, M202, M203, M204, M205, M206, M207,
  M208, M209, M210, M211, M212, M213, M214, M215,
  M216, M217, M218, M219, M220, M221, M222, M223,
  M224, M225, M226, M227, M228, M229, M230, M231,
  M232, M233, M234
}
error er0(bool ep0, uint88 ep1);
library L0 {
  modifier m0(string[] memory i0,address payable i1) 
  {
    _;
  }
  error er1();
  type T0 is int192;
  modifier m1(int64[][] memory i0) 
  {
    assembly
    {
    }
    i0[1] = new int64[](2);
    _;
  }
  event ev0();
  modifier m2(int208 i0,bytes12 i1) 
  {
    if ((!(true)))
    {
      emit ev0();
      _;
    }
    else if ((true ? ((false || false) && true) : true))
    {
      unchecked {
        if ((int232(3450873173395281893717377931138512726225554486085193277581262111899647) <= int232(3450873173395281893717377931138512726225554486085193277581262111899647)))
        {
          i1 = bytes12(0x0a4c9aab558f9a24878e833b);
          if (true)
          {
            emit ev0();
          }
        }
        else
        {
        }
        if ((EN0.M115 <= EN0((((uint216(0) >> uint40(uint40(1099511627775))) | uint216(105312291668557186697918027683670432318895095400549111254310977535)) ** uint232(uint232(3226872529253788384637661980882795097483804039014228079781881638761690))))))
        {
        }
        else if ((false || (false && (!((int144(11150372599265311570767859136324180752990207) >= int144(-9281800691510103858116788622705343216685083)))))))
        {
          do
          {
          }
          while (true);
        }
        else if (true)
        {
          assert((false || false));
        }
        i1 |= bytes12(0x2829597f8bf4397232f305be);
      }
    }
    revert er1();
  }
  bytes6 public constant cons0 = (bytes6(0x000000000000) | (bytes6(0x7899f5b2740e) | bytes6(0x7e213bb6f975)));
}
function f0(string memory i0)     returns(bytes6 o0)
{
  if (false)
  {
    if (true)
    {
    }
    else if (false)
    {
      L0.T0 l0 = L0.T0.wrap(int192(0));
    }
    assembly
    {
      for 
      {
        mstore(mod(o0, 2048), mload(mod(i0, 2048)))
      }
      i0
      {
        return(115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935)
      }
      {
      }
    }
  }
  else if ((((((uint48(0) ** uint232(uint232(6901746346790563787434755862277025452451108972170386555162524223799295))) * uint48(75311470605448)) < uint48(0)) ? true : true) != true))
  {
  }
  else
  {
    emit L0.ev0();
  }
  emit L0.ev0();
}
pragma solidity >= 0.0.0;
// ====
// ----

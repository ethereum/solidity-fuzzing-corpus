
==== Source: su0.sol ====
contract C0 {
  bool immutable public s0 = true;
  mapping(bool => int56)  public s1;
  int232   s2 = int232(0);
  uint232   s3 = uint232(0);
  constructor()   {
    s1[(int232((((int232(3450873173395281893717377931138512726225554486085193277581262111899647) | int232(1875927608647972973781921229850182049868544861753704759769991728926691)) | int232(-586252643993136743703023788136310585629504079363840130380057332653580)) / int232(3450873173395281893717377931138512726225554486085193277581262111899647))) > int232(3450873173395281893717377931138512726225554486085193277581262111899647))] &= s1[(bytes5(0x76e7604720) > (~(bytes5(0xffffffffff))))];
    {
    }
  }
  fallback() external virtual  
  {
    if (true)
    {
      payable(this).transfer(17045325766402780816);
    }
    else
    {
      int232  l0 = s2;
      int232  l1 = l0;
      assert(l1 == s2);
    }
    for(uint solinit0 = 0; solinit0 < (((uint256(0) & (false ? (uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) - uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) : uint256(0))) ^ uint256(0)) % 11); solinit0++)
    {
      continue;
    }
    payable(this).transfer(0);
  }
  function f2() public   payable   {
  }
  receive() external virtual  payable
  {
    if (true)
    {
      if (false)
      {
        (bool l0, bytes memory l1) = address(this).call(abi.encodeWithSelector(this.f2.selector));
      }
      (bool l2, bytes memory l3) = address(this).call(abi.encodeWithSignature("f2()"));
    }
    else
    {
      for(uint solinit1 = 0; solinit1 < (((uint256(0) % ((uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) + uint256(0)) & uint256(0))) >> uint72(uint72(0))) % 11); solinit1++)
      {
        continue;
      }
      if (false)
      {
        payable(this).transfer(9167677832977669050);
        do
        {
          while (s0)
          {
            (bool l4, bytes memory l5) = address(this).call(abi.encodeWithSignature("f2()"));
          }
          payable(this).transfer(6920292262554816289);
        }
        while (true);
      }
    }
  }
}
error er0();
struct St0 {
  bool el0;
}
pragma solidity >= 0.0.0;
function f1(bool i0) pure suffix  returns(bool o0)
{
}

==== Source: su1.sol ====
int208 constant cons0 = 205688069665150755269371147819668813122841983204197482918576127;
struct St1 {
  string el0;
  address el1;
  address el2;
}
enum EN0 {
  M0, M1, M2, M3, M4, M5, M6, M7,
  M8, M9, M10, M11, M12, M13, M14, M15,
  M16, M17, M18, M19, M20, M21, M22, M23,
  M24, M25, M26, M27, M28, M29, M30
}
pragma solidity >= 0.0.0;
// ====
// ----

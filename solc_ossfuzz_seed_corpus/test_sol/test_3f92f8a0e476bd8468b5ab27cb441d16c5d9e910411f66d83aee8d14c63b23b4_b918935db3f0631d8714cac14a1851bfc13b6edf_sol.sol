==== Source:  ====

==== Source: su0.sol ====
library L0 {
  function f0() internal   
  {
    int224 l0 = (((int224(0) | (int224(13479973333575319897333507543509815336818572211270286240551805124607) + int224(-6032659728655486471992496502127421390766590427184032569639469141357))) % int224(-7357670236513564884110387016448218577117409166343747749356108300151)) & int224(0));
    assembly
    {
      codecopy(add(0x80, mod(l0, 1024)), mload(add(0x80, mod(mload(add(0x80, mod(0, 2048))), 2048))), mod(115792089237316195423570985008687907853269984665640564039457584007913129639935, 1024))
      let al0 := l0
      for 
      { let yulinit0 := 0 } lt(yulinit0, mod(al0, 11)) { yulinit0 := add(yulinit0, 1) }
      {
        {
          continue
        }
        switch exp(115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935)
        case 0
        {
          break
        }
        case 115792089237316195423570985008687907853269984665640564039457584007913129639935
        {
          function af0(ai0, ai1, ai2, ai3, ai4, ai5, ai6)
          {
            ai1 := mload(add(0x80, mod(l0, 1024)))
            let al1 := ai5
            ai1 := mod(ai6, 0)
            switch 0
            case 72925940025853275364260374333405875170754544956203921268401611860516865444479
            {
            }
            case 115792089237316195423570985008687907853269984665640564039457584007913129639935
            {
            }
          }
          {
          }
        }
        case 70916710877010600616007560666149660628801105566300098007691457147277095304718
        {
        }
        extcodecopy(0, add(0x80, mod(l0, 1024)), 115792089237316195423570985008687907853269984665640564039457584007913129639935, mod(l0, 1024))
        l0 := al0
        break
      }
      let al2 := al0
    }
  }
}
pragma solidity >= 0.0.0;
// ----
// DeclarationError 6578: (su0.sol:1148-1150): Cannot access local Solidity variables from inside an inline assembly function.

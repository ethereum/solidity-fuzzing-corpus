==== Source:  ====

==== Source: su0.sol ====
enum EN0 {
  M0, M1, M2, M3, M4, M5, M6, M7,
  M8, M9, M10, M11, M12, M13, M14, M15,
  M16, M17, M18, M19, M20, M21, M22, M23,
  M24, M25, M26, M27, M28, M29, M30, M31,
  M32, M33, M34, M35, M36, M37, M38, M39,
  M40, M41, M42, M43, M44, M45, M46, M47,
  M48, M49, M50, M51, M52, M53, M54, M55,
  M56, M57, M58, M59, M60, M61, M62, M63,
  M64, M65, M66, M67, M68, M69, M70, M71,
  M72, M73, M74, M75, M76, M77, M78, M79,
  M80, M81, M82, M83, M84, M85, M86, M87,
  M88, M89, M90, M91, M92, M93, M94, M95,
  M96, M97, M98, M99, M100, M101, M102, M103,
  M104, M105, M106, M107, M108, M109, M110, M111,
  M112, M113, M114, M115, M116, M117, M118
}
contract C0 {
  error er0(bytes ep0, address ep1);
  bytes26   s0 = bytes26(0x75fccb2ba62a133a36b3954f348b47c98c80b3ab3f180ff74a26);
  bool   s1;
  int216[3]  public s2;

	function compareMemoryAndStorage(int216[3] memory v1, int216[3] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  bool  public s3;
  constructor(bool i0,int216[3] memory i1,bool i2) payable  {
    s1 = true;
    s2 = i1;
    s3 = (false ? true : true);
    unchecked {
      int176(((int176(((int176(47890485652059026823698344598447161988085597568237567) ^ (int176(46398879233567367491667544763910995931179121340357241) ^ int176(0))) / int176(0))) - int176(0)) / int176(17438726809239986238149270072797482927442921676404)));
      (s2[(((((uint256(102323557587930062692436463109046392265441986116605459324997140969667105022489) ** uint248(uint248(46011190617593506345660510444927243502485498756201862931323945278457168379))) % uint256(0)) ^ uint256(48757289655280963198510850697946841738666399340559141682942311023913842316858)) * uint256(0)) | uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))], s1) = (int216((int216((int216(((((int216(34515322706242580431056754761969510035325270267280712448342036306) * int216(0)) - int216(28920587876256299607723355375744143798729076314259639700079443599)) + int216(0)) / int216(52656145834278593348959013841835216159447547700274555627155488767))) / int216(0))) / int216(52656145834278593348959013841835216159447547700274555627155488767))), true);
      assert(s2[(((((uint256(102323557587930062692436463109046392265441986116605459324997140969667105022489) ** uint248(uint248(46011190617593506345660510444927243502485498756201862931323945278457168379))) % uint256(0)) ^ uint256(48757289655280963198510850697946841738666399340559141682942311023913842316858)) * uint256(0)) | uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))] == int216((int216((int216(((((int216(34515322706242580431056754761969510035325270267280712448342036306) * int216(0)) - int216(28920587876256299607723355375744143798729076314259639700079443599)) + int216(0)) / int216(52656145834278593348959013841835216159447547700274555627155488767))) / int216(0))) / int216(52656145834278593348959013841835216159447547700274555627155488767))));
      assert(s1 == true);
      bool  l0 = s1;
      bool  l1 = l0;
      assert(l1 == s1);
      bool  l2 = s1;
      bool  l3 = l2;
      assert(l3 == s1);
    }
  }
}
pragma solidity >= 0.0.0;
// ----
// Warning 6133: (su0.sol:1230-1478): Statement has no effect.
// Warning 5667: (su0.sol:1100-1107): Unused function parameter. Remove or comment out the variable name to silence this warning.
// Warning 5667: (su0.sol:1128-1135): Unused function parameter. Remove or comment out the variable name to silence this warning.
// Warning 2018: (su0.sol:818-1066): Function state mutability can be restricted to view

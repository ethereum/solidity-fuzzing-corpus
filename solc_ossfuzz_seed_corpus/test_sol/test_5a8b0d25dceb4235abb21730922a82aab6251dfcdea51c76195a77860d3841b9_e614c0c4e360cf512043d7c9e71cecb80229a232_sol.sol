==== Source:  ====

==== Source: su0.sol ====
type T0 is bool;
function f0(bool i0)     returns(bool o0,bytes26[1] memory o1)
{
}
pragma solidity >= 0.0.0;
uint216 constant cons0 = uint216(((~(uint216(((((uint216(7703997916687912901151618541814426157954077454338789483089476516) << uint152(uint152(4135628620808901478012534615138567326901995324))) * uint216(60272329236818796152474885947737823425901425535832766140553089217)) - uint216(105312291668557186697918027683670432318895095400549111254310977535)) / uint216(61733433091407768584180731739756576367872217736894866339440589446))))) / uint216(49695177786097810926692836306558868587220379138846063960157915542)));
library L0 {
  error er0(bytes5 ep0);
  uint136 public constant cons1 = ((((uint136(((uint136(87112285931760246646623899502532662132735) + uint136(23975666061451279862588357921743338378771)) / uint136(87112285931760246646623899502532662132735))) - uint136(87112285931760246646623899502532662132735)) << uint168(uint168(91159162028094441954623787355505521784530416093399))) * uint136(0)) + uint136(23797435170260571014564653457586006436008));
  modifier m0(T0 i0) 
  {
    _;
  }
  error er1();
  event ev0(int64  ep0, int128  ep1, bytes  ep2, bytes31 indexed ep3);
}
// ----
// Warning 3149: (su0.sol:695-991): The result type of the shift operation is equal to the type of the first operand (uint136) ignoring the (larger) type of the second operand (uint168) which might be unexpected. Silence this warning by either converting the first or the second operand to the type of the other.

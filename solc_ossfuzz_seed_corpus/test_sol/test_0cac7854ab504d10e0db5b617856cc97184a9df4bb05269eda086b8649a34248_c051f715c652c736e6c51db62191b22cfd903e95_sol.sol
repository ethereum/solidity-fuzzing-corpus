
==== Source: su0.sol ====
function f0(bool i0)    
{
  require((true ? true : true), string("80a2a79103f95fc5ba308aae6e064a328a3c61f7ff3c7e9660418ecf1d20515440bcb46dc7d86672792c"));
  int216 l0 = (true ? (~((((int216(0) ^ int216(52656145834278593348959013841835216159447547700274555627155488767)) & int216(-15101487138892644856054974235220486935138216481415941850057476503)) ^ int216(52656145834278593348959013841835216159447547700274555627155488767)))) : int216(-7752251852727546643137404985178522342258843065195287414661624428));
}
pragma solidity >= 0.0.0;

==== Source: su1.sol ====
pragma solidity >= 0.0.0;
function f1(uint112 i0)    
{
  int16(-30797);
  i0 += uint112(262847450835193045222660204779637);
  bytes32 l0 = bytes32(bytes19(0x1c46114339e927bbb99ec337559b82431b693c));
  address[8] memory l1 = [address(0x0000000000000000000000000000000000000002), address(0x0000000000000000000000000000000000000007), address(0x0000000000000000000000000000000000000003), address(0x0000000000000000000000000000000000000003), address(0x0000000000000000000000000000000000000008), address(0x0000000000000000000000000000000000000007), address(0x0000000000000000000000000000000000000001), address(0x0000000000000000000000000000000000000008)];
}
contract C0 {
  function f2() public    returns(address payable[][][8][] memory o0)
  {
  }
  int24   s0;
  int80   s1 = int80(225188321513174779539238);
  uint256   s2 = uint256(0);
  int24   s3;
  constructor(int24 i0,int24 i1)   {
    s0 |= ((int24(0) * int24(8388607)) | int24((int232(3450873173395281893717377931138512726225554486085193277581262111899647) * int232(0))));
    s3 &= (int24(0) % int24(-342705));
    unchecked {
    }
  }
}
// ====
// ----

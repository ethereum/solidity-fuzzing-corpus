
==== Source: su0.sol ====
pragma solidity >= 0.0.0;

==== Source: su1.sol ====
contract C0 {
  fallback() external   payable
  {
    bytes27 l0 = bytes27(0x150a93b5b54ab64d91e2687b31b736d6d48d4a348fc07ee2dc0b35);
    function () internal   returns (bytes28) l1;
    bool l2 = ((~(bytes31(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))) > ((bytes31(bytes30(0x1ece61e758b55eb15171eb4bc0aa0fc1d76f85affab0b014eba4d83db62c)) ^ bytes31(0x00000000000000000000000000000000000000000000000000000000000000)) | bytes31(0x7de695a94d98164c8385998c048da9e0cbf4ae30fffcd55cef3aae9de206ed)));
    bool l3 = true;
  }
  address[][]  public s0 = [[address(0x0000000000000000000000000000000000000008), address(0x0000000000000000000000000000000000000005), address(0x0000000000000000000000000000000000000008), address(0x0000000000000000000000000000000000000004), address(0x0000000000000000000000000000000000000008)], [address(0x0000000000000000000000000000000000000004), address(0x0000000000000000000000000000000000000002), address(0x0000000000000000000000000000000000000003), address(0x0000000000000000000000000000000000000003), address(0x0000000000000000000000000000000000000007)], [address(0x0000000000000000000000000000000000000001), address(0x0000000000000000000000000000000000000004), address(0x0000000000000000000000000000000000000006), address(0x0000000000000000000000000000000000000001), address(0x0000000000000000000000000000000000000004)]];

	function compareMemoryAndStorage(address[][] memory v1, address[][] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (!compareMemoryAndStorage(v1[i], v2[i]))

				return false;
		return true;
	}

	function compareMemoryAndStorage(address[] memory v1, address[] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  bytes7 immutable  s1 = bytes7(0x00000000000000);
  address payable   s2;
  bytes24  public s3;
  constructor(address payable i0,bytes24 i1)   {
    s2 = payable(address(this));
    s3 ^= bytes24(0x5d916c2c0b785ae18122c7ce425b339c4a51ffde294797cb);
    unchecked {
      s0.pop();
      s0[(((uint240(1766847064778384329583297500742918515827483896875618958121606201292619775) - (true ? uint240(1441063731185713280386085050564187737494466633096783412889884525859668410) : uint240(0))) | uint256(33499325313328246945000304738988486020097345485801865013214971299400401593778)) ^ uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))] = [address(0x0000000000000000000000000000000000000003), address(0x0000000000000000000000000000000000000001), address(0x0000000000000000000000000000000000000002), address(0x0000000000000000000000000000000000000004), address(0x0000000000000000000000000000000000000003)];
      (bool l0) = payable(this).send(0);
    }
  }
}
pragma solidity >= 0.0.0;
// ====
// ----


==== Source: su0.sol ====
struct St0 {
  bytes17 el0;
}
contract C0 {
  bytes1   s0 = bytes1(0x78);
  receive() external virtual  payable
  {
    string("0000000000000000000000000000000000000000ec8a0227315c");
    assembly
    {
      switch 115792089237316195423570985008687907853269984665640564039457584007913129639935
      default
      {
        switch create2(111977408593915870999537370413412532738738971524759640193899151769790431561383, 88461249215813419498964404008188324750591835172701189731851081795409985038693, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935)
        case 7219970672710365826175830866589125921673451680608050227431050230309365640375
        {
        }
        case 72450542296318486688664157583467415257319201187430752184138288154052874789950
        {
        }
        case 33318254843031235953678175189910947192332629998952821177972652440982450912691
        {
          switch mload(add(0x80, mod(62450802182428999835289117115581154276870544345509465752397186565230375820337, 2048)))
          default
          {
            function af0(ai0, ai1, ai2, ai3, ai4) -> ao0, ao1, ao2, ao3, ao4, ao5, ao6
            {
              let al0, al1, al2, al3, al4, al5, al6 := af0(s0.offset, sload(0), 115792089237316195423570985008687907853269984665640564039457584007913129639935, 112206570325803348212109382305855866941711566386725672515088934524213940296428, 15118748395491601978979984166938182575659959554246207409143267961751579032827)
              ao3 := s0.offset
              for 
              { let yulinit0 := 0 } lt(yulinit0, mod(extcodesize(0), 11)) { yulinit0 := add(yulinit0, 1) }
              {
                let al7 := 0
                extcodecopy(s0.offset, add(0x80, mod(ai0, 1024)), s0.offset, mod(ai2, 1024))
              }
            }
            let al8, al9, al10, al11, al12, al13, al14 := af0(mload(add(0x80, mod(ai0, 1024))), 39347384577393328784372475711657647020827418456096953676124587489757873424683, 30833353874390553003695132379115388644368051227572111061047209040617276533442, 76854264450279502742270741820971209295142351398990226246050086580116076040037, 0)
            let al15 := 115792089237316195423570985008687907853269984665640564039457584007913129639935
          }
        }
        for 
        {
          let al16 := 115792089237316195423570985008687907853269984665640564039457584007913129639935
        }
        0
        {
        }
        {
          switch s0.offset
          default
          {
            switch 1262545826688324780172855436910016841232973612129078389623898073727456876685
            case 0
            {
            }
            case 103249137887114351790034325799974427999356090248213822505384152260192120899483
            {
              pop(s0.slot)
              let al17 := 0
            }
          }
          selfdestruct(0)
        }
      }
    }
    unchecked {
      bytes1  l0 = s0;
      bytes1  l1 = l0;
      assert(l1 == s0);
      bytes1  l2 = s0;
      bytes1  l3 = l2;
      assert(l3 == s0);
      (bool l4, bytes memory l5) = payable(this).call{value: 0}("");
      bytes1  l6 = s0;
      bytes1  l7 = l6;
      assert(l7 == s0);
      string("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4c3f2128a92912a67bc490ba9a9f8c97440deb4d");
    }
  }
}
pragma solidity >= 0.0.0;
// ====
// ----

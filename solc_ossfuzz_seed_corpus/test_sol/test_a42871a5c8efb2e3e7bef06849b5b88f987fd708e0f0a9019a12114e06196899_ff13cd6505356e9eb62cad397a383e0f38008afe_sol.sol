
==== Source: su0.sol ====
function f0()     returns(bool o0)
{
  if (((false == (((uint16(65535) + uint16(65535)) - uint16(21737)) == uint16(0))) && true))
  {
    assembly
    {
      stop()
      for 
      {
        switch 115792089237316195423570985008687907853269984665640564039457584007913129639935
        default
        {
          selfdestruct(o0)
        }
        selfdestruct(callcode(o0, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 0, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 86098931735921734488122964562711428657962869646553125991121034904969090485023, 93984917311309676446545597001910892741667784923312677841777294197208277233900, 115792089237316195423570985008687907853269984665640564039457584007913129639935))
      }
      80728976268369461933933446262926596440231543673764198524536653329980842023819
      {
      }
      {
        let al0 := 7521643491518145860840618186707450358831021518025327692598120243580725971376
        stop()
      }
    }
  }
  else if ((bytes19(0x57f7df4dd7423b436630119e831ef720d67bc9) <= bytes19(0xffffffffffffffffffffffffffffffffffffff)))
  {
  }
  else if (f0())
  {
    assembly
    {
      switch o0
      case 115792089237316195423570985008687907853269984665640564039457584007913129639935
      {
        let al1 := o0
      }
    }
  }
  for(;
false;
)
  {
  }
}
error er0(address payable ep0);
contract C0 {
  function f1(address i0) public    returns(bool[] memory o0,int192 o1)
  {
    do
    {
      return (new bool[](2), ((int192(0) | int192(0)) % int192(3138550867693340381917894711603833208051177722232017256447)));
    }
    while (true);
    (o0[0], o0[1]) = (true, (false && (!((!(false))))));
    o0[1] = (int160(-15875104869113354159250794089664680252122105519) <= int160(730750818665451459101842416358141509827966271487));
  }
  modifier m0(bytes26 i0,address payable i1) 
  {
    _;
  }
  uint144 public constant cons0 = uint144(((uint144(0) | (~(((uint144(0) % uint144(0)) | uint144(0))))) / uint144(0)));
  enum EN0 {
    M0, M1, M2, M3, M4, M5, M6, M7,
    M8, M9, M10, M11, M12, M13, M14, M15,
    M16, M17, M18, M19, M20, M21, M22, M23,
    M24, M25, M26, M27, M28, M29, M30, M31,
    M32, M33, M34, M35, M36, M37, M38, M39,
    M40, M41, M42, M43, M44, M45, M46, M47,
    M48, M49, M50, M51, M52, M53, M54, M55,
    M56, M57, M58, M59, M60, M61, M62, M63,
    M64, M65, M66, M67, M68, M69, M70, M71,
    M72, M73, M74, M75, M76, M77, M78, M79,
    M80, M81, M82, M83, M84, M85, M86, M87,
    M88, M89, M90, M91, M92, M93, M94, M95,
    M96, M97, M98, M99, M100, M101, M102, M103,
    M104, M105, M106, M107, M108, M109, M110, M111,
    M112, M113, M114, M115, M116, M117, M118, M119,
    M120, M121, M122, M123, M124, M125, M126, M127,
    M128, M129, M130, M131, M132, M133, M134, M135,
    M136, M137, M138, M139, M140, M141, M142, M143,
    M144, M145, M146, M147, M148, M149, M150, M151,
    M152, M153, M154, M155, M156, M157, M158
  }
  enum EN1 {
    M0, M1, M2, M3, M4, M5, M6, M7,
    M8, M9, M10, M11, M12, M13, M14, M15,
    M16, M17, M18
  }
  bool   s0 = false;
  bool[]  public s1 = [false, true];
}
address constant cons1 = 0x0000000000000000000000000000000000000000;
pragma solidity >= 0.0.0;
// ====
// ----


==== Source: su0.sol ====
pragma solidity >= 0.0.0;
contract C0 {
  bytes26   s0;
  address[][]   s1 = [[address(0x0000000000000000000000000000000000000006)], [address(0x0000000000000000000000000000000000000003)], [address(0x0000000000000000000000000000000000000008)], [address(0x0000000000000000000000000000000000000007)], [address(0x0000000000000000000000000000000000000002)], [address(0x0000000000000000000000000000000000000008)], [address(0x0000000000000000000000000000000000000002)], [address(0x0000000000000000000000000000000000000001)], [address(0x0000000000000000000000000000000000000006)], [address(0x0000000000000000000000000000000000000007)]];

	function compareMemoryAndStorage(address[][] memory v1, address[][] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (!compareMemoryAndStorage(v1[i], v2[i]))

				return false;
		return true;
	}

	function compareMemoryAndStorage(address[] memory v1, address[] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  constructor(bytes26 i0) payable  {
    s0 ^= ((((bytes8(0xffffffffffffffff) | bytes8(0xffffffffffffffff)) ^ bytes8(0xffffffffffffffff)) != bytes8(0x0000000000000000)) ? bytes26(0x0000000000000000000000000000000000000000000000000000) : bytes26(0x799f219334ccbfcadb34826c628099c7fdeb2e35487b9338e3b3));
    unchecked {
      address[][] memory l0 = s1;
      address[][] memory l1 = l0;
      assert(compareMemoryAndStorage(l1, s1));
      (s1[uint256(42130708711574371954427354618861136413107704487533288861967506116399386228828)], l1[uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)]) = ([address(0x0000000000000000000000000000000000000007)], [address(0x0000000000000000000000000000000000000007)]);
      bytes26  l2 = s0;
      bytes26  l3 = l2;
      assert(l3 == s0);
      bytes26  l4 = s0;
      bytes26  l5 = l4;
      assert(l5 == s0);
      (l1[((uint256((uint256(13036843711126862361004237152981016708276172010987048409338641530647647908684) / uint256(0))) % (uint256(74803782635769040124255042118700297627294566384750017285207366626900622033845) * uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))) - uint256(15350547547886953784919094045084104380329556452431150300695512872688821834069))], s0) = ([address(0x0000000000000000000000000000000000000004)], (~(((bytes26(bytes22(0xd76855fd854d414eae14580f683dc2e9e41969830a01)) | bytes26(0x0000000000000000000000000000000000000000000000000000)) & bytes26(0x0000000000000000000000000000000000000000000000000000)))));
      assert(s0 == (~(((bytes26(bytes22(0xd76855fd854d414eae14580f683dc2e9e41969830a01)) | bytes26(0x0000000000000000000000000000000000000000000000000000)) & bytes26(0x0000000000000000000000000000000000000000000000000000)))));
      (bool l6, bytes memory l7) = address(this).call(bytes("ffffffffffffffffffffffffffffffff000000000000000000000000000000000000"));
    }
  }
}
// ====
// ----

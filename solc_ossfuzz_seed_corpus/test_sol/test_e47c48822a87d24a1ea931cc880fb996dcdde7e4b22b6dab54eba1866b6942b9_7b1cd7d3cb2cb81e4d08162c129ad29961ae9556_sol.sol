
==== Source: su0.sol ====
contract C0 {
  fallback() external   
  {
    require(false);
  }
  uint56   s0 = uint56(41884984985337668);
  uint56   s1 = uint56(72057594037927935);
  address[10]   s2 = [address(0x0000000000000000000000000000000000000008), address(0x0000000000000000000000000000000000000006), address(0x0000000000000000000000000000000000000002), address(0x0000000000000000000000000000000000000003), address(0x0000000000000000000000000000000000000003), address(0x0000000000000000000000000000000000000006), address(0x0000000000000000000000000000000000000001), address(0x0000000000000000000000000000000000000001), address(0x0000000000000000000000000000000000000004), address(0x0000000000000000000000000000000000000005)];

	function compareMemoryAndStorage(address[10] memory v1, address[10] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  mapping(uint80 => bool)   s3;
  constructor()   {
    s3[((uint80(1208925819614629174706175) % uint80((((uint80(0) ** uint200(uint200(0))) ^ uint80(0)) / uint80(0)))) + uint80(1208925819614629174706175))] = true;
    unchecked {
      s2[uint256(62796748608317129110871254763634513881864713921058021236060700662966155774964)] = s2[(address(this).balance * (~(uint256(88960573400503345297760005899806743090475313677971737355690248793332751797042))))];
      assert(s2[uint256(62796748608317129110871254763634513881864713921058021236060700662966155774964)] == s2[(address(this).balance * (~(uint256(88960573400503345297760005899806743090475313677971737355690248793332751797042))))]);
      s2[uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)] = address(this);
      assert(s2[uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)] == address(this));
      uint56  l0 = s0;
      uint56  l1 = l0;
      assert(l1 == s0);
    }
  }
}
pragma solidity >= 0.0.0;

==== Source: su1.sol ====
pragma solidity >= 0.0.0;
// ====
// ----

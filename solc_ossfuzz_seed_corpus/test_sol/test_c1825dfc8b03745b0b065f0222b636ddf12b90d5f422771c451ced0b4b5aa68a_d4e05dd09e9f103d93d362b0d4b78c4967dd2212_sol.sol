==== Source:  ====

==== Source: su0.sol ====
contract C0 {
  int200  public s0 = int200(0);
  int80   s1;
  bytes32  public s2 = bytes32(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
  constructor(int80 i0)   {
    s1 = int80(-3552322443384958120162);
    {
      int80  l0 = s1;
      int80  l1 = l0;
      assert(l1 == s1);
      int80  l2 = s1;
      int80  l3 = l2;
      assert(l3 == s1);
      for(      function (int248) internal   returns (bool) l4;
false;
)
      {
      }
      int200  l5 = s0;
      int200  l6 = l5;
      assert(l6 == s0);
    }
  }
  fallback() external   
  {
    s1 /= (int80(418678307321283827622040) % (int80(0) - ((int80(604462909807314587353087) * int80(308074909204339193677084)) & int80(604462909807314587353087))));
  }
  receive() external virtual  payable
  {
    assembly
    {
      for 
      { let yulinit0 := 0 } lt(yulinit0, mod(eq(sub(0, 115792089237316195423570985008687907853269984665640564039457584007913129639935), 0), 11)) { yulinit0 := add(yulinit0, 1) }
      {
        for 
        { let yulinit1 := 0 } lt(yulinit1, mod(115792089237316195423570985008687907853269984665640564039457584007913129639935, 11)) { yulinit1 := add(yulinit1, 1) }
        {
          returndatacopy(add(0x80, mod(s2.slot, 1024)), 115792089237316195423570985008687907853269984665640564039457584007913129639935, mod(byte(s2.offset, 0), 1024))
          function af0(ai0, ai1, ai2, ai3, ai4, ai5, ai6, ai7, ai8, ai9, ai10, ai11, ai12, ai13, ai14, ai15, ai16, ai17)
          {
            revert(115792089237316195423570985008687907853269984665640564039457584007913129639935, s1.slot)
          }
          returndatacopy(add(0x80, mod(mload(add(0x80, mod(s2.slot, 1024))), 1024)), 115792089237316195423570985008687907853269984665640564039457584007913129639935, mod(s0.slot, 1024))
          let al0 := 115792089237316195423570985008687907853269984665640564039457584007913129639935
        }
        switch 70190436336007337988238933505882946459467597796627668143037550005406226029877
        case 77493353836116039348724518605010144116558803332239365155899115532602757465267
        {
          continue
        }
        mstore8(add(0x80, mod(46772594740592175390608025271605383029799035835455780167718432603408565733458, 2048)), mload(add(0x80, mod(s2.slot, 1024))))
        let al1 := s2.offset
      }
      for 
      {
        codecopy(add(0x80, mod(115792089237316195423570985008687907853269984665640564039457584007913129639935, 1024)), 49876052992581878350304601631770864401896175900468100200871817656034518537407, mod(s2.offset, 1024))
        returndatacopy(add(0x80, mod(0, 1024)), 7257147044705871511239542596892971753105798774350459052408952886875345672241, mod(extcodesize(73188536634403991076102218981896971021458474576796434818783867361184850286426), 1024))
      }
      34317061116401159639933658517680010612703569074907573656494947390219673471023
      {
        returndatacopy(add(0x80, mod(12255263797485775928030277707062310356908938453896739395574011101999595800306, 1024)), 0, mod(114240992231541993598890766388094945856557468791406640608795404652630323369788, 1024))
      }
      {
        calldatacopy(add(0x80, mod(115792089237316195423570985008687907853269984665640564039457584007913129639935, 1024)), s0.offset, mod(115792089237316195423570985008687907853269984665640564039457584007913129639935, 1024))
        let al2 := 115792089237316195423570985008687907853269984665640564039457584007913129639935
      }
    }
    assembly
    {
      switch 115792089237316195423570985008687907853269984665640564039457584007913129639935
      default
      {
      }
      calldatacopy(add(0x80, mod(63045570018597808434028437172456298050496988798785278731174734532982789969387, 1024)), 115792089237316195423570985008687907853269984665640564039457584007913129639935, mod(57539564862014425110727598154058734710302082035048083875387549450805993077352, 1024))
    }
  }
}
pragma solidity >= 0.0.0;
// ----
// Warning 9592: (su0.sol:3478-3593): "switch" statement with only a default case.
// Warning 5667: (su0.sol:175-183): Unused function parameter. Remove or comment out the variable name to silence this warning.
// Warning 2072: (su0.sol:388-434): Unused local variable.

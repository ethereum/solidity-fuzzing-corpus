==== Source:  ====

==== Source: su0.sol ====
pragma solidity >= 0.0.0;
contract C0 {
  int176[]  public s0;

	function compareMemoryAndStorage(int176[] memory v1, int176[] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  constructor(int176[] memory i0) payable  {
    s0 = i0;
    {
      (s0, i0[(uint256(53200831249873757156697433213093840161704669769256605085223026467578644327274) >> uint248((((~(uint248(50842926804584320416610028865657554300883687090718737287244520381111156812))) << uint8(uint8(255))) % uint248(103649692410511191423054005069678171045964469230471805089663757303208723231))))], s0) = ([int176(28272379315791809089193175216505671951660451389321392), int176(47890485652059026823698344598447161988085597568237567), int176(32363521160577003441475507873583869426977498394793445), int176(47890485652059026823698344598447161988085597568237567)], int176(-39706957101617901570093145562180410903909376096101440), [int176(0), int176(0), int176(38749987664685989959824281347697940497850600410700488), int176(-16632975925474735947815049088429255922264805127056773)]);
      assert(i0[(uint256(53200831249873757156697433213093840161704669769256605085223026467578644327274) >> uint248((((~(uint248(50842926804584320416610028865657554300883687090718737287244520381111156812))) << uint8(uint8(255))) % uint248(103649692410511191423054005069678171045964469230471805089663757303208723231))))] == int176(-39706957101617901570093145562180410903909376096101440));
      (bool l0, bytes memory l1) = payable(this).call{value: 14210010049484196389}("");
      int176[] memory l2 = s0;
      int176[] memory l3 = l2;
      assert(compareMemoryAndStorage(l3, s0));
      s0.push(i0[(uint256(94971496059757208159076691162162708927393304410250176456711151948964309833712) ^ ((uint256(0) + uint256(86858409152787609381945337713328109202009463011735207388817391130095158391841)) % uint256(56122946542025753517300087442928701259613963276881805880145216853851015140965)))]);
    }
  }
  receive() external virtual  payable
  {
    (bool l0) = payable(this).send(0);
  }
}
// ----
// Warning 2072: (su0.sol:1565-1572): Unused local variable.
// Warning 2072: (su0.sol:1574-1589): Unused local variable.
// Warning 2072: (su0.sol:2116-2123): Unused local variable.
// Warning 2018: (su0.sol:65-311): Function state mutability can be restricted to view

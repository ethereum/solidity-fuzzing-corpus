
==== Source: su0.sol ====
library L0 {
  function f0() external    returns(bytes memory o0,address o1)
  {
    bool[4][][][5][][4] memory l0 = [new bool[4][][][5][](10), new bool[4][][][5][](10), new bool[4][][][5][](10), new bool[4][][][5][](10)];
    address l1 = address(0x0000000000000000000000000000000000000006);
    bool l2 = true;
  }
  type T0 is int96;
}
contract C0 {
  bytes10[8]   s0 = [bytes10(0x36d72f2ba0e83e76c816), bytes10(0xffffffffffffffffffff), bytes10(0xcb8f86fdab8b00f68191), bytes10(0x00000000000000000000), bytes10(0xffffffffffffffffffff), bytes10(0xffffffffffffffffffff), bytes10(0xffffffffffffffffffff), bytes10(0x2a945bb0e488197d9e5b)];

	function compareMemoryAndStorage(bytes10[8] memory v1, bytes10[8] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  bytes9   s1 = bytes9(0x000000000000000000);
  bool  public s2;
  constructor(bool i0)   {
    s2 = false;
    unchecked {
      (bool l0, bytes memory l1) = address(this).call(bytes("45fd0f2c7db7e12bebf2881fee1bfe6ff01200000000000000000000000000000000000000000000000000000000"));
      (s0[(uint256((uint256(((uint104(4153306674714794237111425996997) + uint256(0)) / uint256(0))) / uint256(0))) | uint256(0))], s0[((((~((uint256(0) & uint256(51270534834572276844297717403642847672157001471145849335712016112612229545169)))) | uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) & uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) * uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))], s0[(((uint256(0) | l1.length) - (uint256(3065611004598752758984650044303465175935977389788744349056493918000376599541) + uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))) * uint256(0))]) = (bytes10(0x7e27565bc14519452a86), (s0[uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)] ^ (bytes10(0xffffffffffffffffffff) ^ bytes10(0x00000000000000000000))), bytes10(0x00000000000000000000));
      assert(s0[(uint256((uint256(((uint104(4153306674714794237111425996997) + uint256(0)) / uint256(0))) / uint256(0))) | uint256(0))] == bytes10(0x7e27565bc14519452a86));
      assert(s0[((((~((uint256(0) & uint256(51270534834572276844297717403642847672157001471145849335712016112612229545169)))) | uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) & uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) * uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))] == (s0[uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)] ^ (bytes10(0xffffffffffffffffffff) ^ bytes10(0x00000000000000000000))));
      assert(s0[(((uint256(0) | l1.length) - (uint256(3065611004598752758984650044303465175935977389788744349056493918000376599541) + uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))) * uint256(0))] == bytes10(0x00000000000000000000));
      bytes9  l2 = s1;
      bytes9  l3 = l2;
      assert(l3 == s1);
      (bool l4, bytes memory l5) = address(this).call((false ? l1 : bytes("5b83e1acc56bdb7d2229417dd04d834c225b5f12b3c341c2")));
    }
  }
  using L0 for *;
}
pragma solidity >= 0.0.0;
// ====
// ----


==== Source: su0.sol ====
contract C0 {
  fallback() external   
  {
    ((uint40(1099511627775) + (uint40(int40(-99731814604)) + uint40(0))) >> uint8(uint8(0)));
    assembly
    {
      calldatacopy(add(0x80, mod(0, 1024)), 0, mod(115792089237316195423570985008687907853269984665640564039457584007913129639935, 1024))
      pop(0)
      {
        return(115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935)
      }
      for 
      {
        for 
        {
          for 
          {
            calldatacopy(add(0x80, mod(115792089237316195423570985008687907853269984665640564039457584007913129639935, 1024)), 0, mod(115792089237316195423570985008687907853269984665640564039457584007913129639935, 1024))
          }
          115792089237316195423570985008687907853269984665640564039457584007913129639935
          {
            calldatacopy(add(0x80, mod(84554510268507938042713792892307020557114937630559733010808744364354091291165, 1024)), 0, mod(0, 1024))
          }
          {
            let al0 := calldataload(mod(115792089237316195423570985008687907853269984665640564039457584007913129639935, calldatasize()))
            pop(al0)
          }
          extcodecopy(27611187964824393561097389074303969060613693227094446305945236459526023785284, add(0x80, mod(calldataload(mod(0, calldatasize())), 1024)), 0, mod(105695235165235705918932503231354862021627033194054359067002101035819429360637, 1024))
        }
        115792089237316195423570985008687907853269984665640564039457584007913129639935
        {
          selfdestruct(115792089237316195423570985008687907853269984665640564039457584007913129639935)
        }
        {
          switch 0
          case 48037008266114004438829652993153623239028639924827410643023692137460012709685
          {
          }
          case 0
          {
          }
          return(115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935)
        }
      }
      115792089237316195423570985008687907853269984665640564039457584007913129639935
      {
      }
      {
      }
    }
    bool l0 = ((bytes14(0x04a8d2d3ba4fab593790c7b2e651) | ((true ? bytes16(0x786f980c6b6674a94f7ba30167a83352) : bytes16(0xffffffffffffffffffffffffffffffff)) | bytes16(0xffffffffffffffffffffffffffffffff))) <= bytes16(0x2f36c76fcadb30e311ad9c8eb3e11b34));
  }
  bool   s0 = true;
  int224  public s1 = int224(-9168288225337891112066181187763423944239062455011929230278111739892);
  bytes   s2;

	function compareMemoryAndStorage(bytes memory v1, bytes storage v2) internal pure returns (bool) {
		return keccak256(bytes(v1)) == keccak256(bytes(v2));
	}
  address payable  public s3;
  constructor(bytes memory i0,address payable i1) payable  {
    s2 = bytes("ffffffffffffff0000");
    s3 = payable(address(this));
    unchecked {
    }
  }
  receive() external   payable
  {
    address payable  l0 = s3;
    address payable  l1 = l0;
    assert(l1 == s3);
  }
}
pragma solidity >= 0.0.0;
contract C1 is C0 {
  address payable   s4 = payable(address(this));
  uint200   s5 = uint200(110396268512406662638035013002043403847593081128282854629528);
  bytes5   s6 = bytes5(0xfd3633065b);
  bool   s7 = false;
  constructor(bytes memory i0,address payable i1)  C0(bytes("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), payable(address(this)))
  {
    s2 = bytes("ffffffbe70f97d608f761eb2554840c8df");
    s3 = ((false == (uint200(1535285769678544153557771953291162686037550893954474597814435) <= (~(uint200(0))))) ? payable(address(this)) : payable(address(this)));
    unchecked {
      address payable  l0 = s4;
      address payable  l1 = l0;
      assert(l1 == s4);
    }
  }
}
struct St0 {
  bool el0;
  int104 el1;
}

==== Source: su1.sol ====
pragma solidity >= 0.0.0;
// ====
// ----

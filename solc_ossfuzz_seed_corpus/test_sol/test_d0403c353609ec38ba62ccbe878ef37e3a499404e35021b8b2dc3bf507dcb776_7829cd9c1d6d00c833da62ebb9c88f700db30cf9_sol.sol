==== Source:  ====

==== Source: su0.sol ====
error er0();
library L0 {
  enum EN0 {
    M0, M1, M2, M3, M4, M5, M6, M7,
    M8, M9, M10, M11, M12, M13, M14, M15,
    M16, M17, M18, M19, M20, M21, M22, M23,
    M24, M25, M26, M27, M28, M29, M30, M31,
    M32, M33, M34, M35, M36, M37, M38, M39,
    M40, M41, M42, M43, M44, M45, M46, M47,
    M48, M49, M50, M51, M52, M53, M54, M55,
    M56, M57, M58, M59, M60, M61, M62, M63,
    M64, M65, M66, M67, M68, M69, M70, M71,
    M72, M73, M74, M75, M76, M77, M78, M79,
    M80, M81, M82, M83, M84, M85, M86, M87,
    M88, M89, M90, M91, M92, M93
  }
  function f0() internal    returns(address payable o0,string memory o1)
  {
  }
  modifier m0(L0.EN0 i0) 
  {
    revert er0();
    assembly
    {
      if 0
      {
        if i0
        {
          switch i0
          case 115792089237316195423570985008687907853269984665640564039457584007913129639935
          {
            let al0 := calldataload(mod(i0, calldatasize()))
          }
          case 111767131902574863775797247179373217508831308225721852473463224448517165501037
          {
            switch 107951512536395892857174848201332584637632856040820109303171947381065760409315
            case 41892215682598664200008437615955480946300385248062222603639543090962412000314
            {
            }
            default
            {
              let al1 := i0
              switch signextend(mload(mod(30047835349506660834524512461850346847270445768695686154964339565416375848895, 2048)), 107046743597388525623408384185979155615610303123615167309078035267178018328757)
              case 115792089237316195423570985008687907853269984665640564039457584007913129639935
              {
                mstore(mod(115792089237316195423570985008687907853269984665640564039457584007913129639935, 2048), al1)
              }
            }
            i0 := 0
            i0 := 115792089237316195423570985008687907853269984665640564039457584007913129639935
          }
          return(mload(mod(i0, 2048)), 0)
          switch i0
          default
          {
            if 65141808931284800231850717205835064125179062699051367873278145675020426131858
            {
              return(mload(mod(115792089237316195423570985008687907853269984665640564039457584007913129639935, 2048)), i0)
            }
          }
        }
        function af0(ai0, ai1)
        {
          switch ai1
          case 89808221398118504372162766002100516487122820407733803427772443393483275984966
          {
            ai0 := ai1
          }
          switch ai0
          default
          {
            for 
            {
            }
            ai0
            {
            }
            {
            }
          }
        }
        i0 := 95408876142876975701228989741540329656370753814162373020802962325987961857449
      }
      stop()
      for 
      {
      }
      115792089237316195423570985008687907853269984665640564039457584007913129639935
      {
      }
      {
        pop(115792089237316195423570985008687907853269984665640564039457584007913129639935)
        break
      }
      i0 := i0
    }
    uint136 l0 = uint136(28290400457490776547213151349106858129897);
    _;
  }
  using L0 for *;
  event ev0(bytes9  ep0, function (bool, uint184, int32) external   returns (bool, L0.EN0[2] memory)  ep1, function (address payable, int32, L0.EN0) external   indexed ep2, bytes3  ep3) anonymous;
}
pragma solidity >= 0.0.0;
using L0 for uint;
struct St0 {
  bytes el0;
  L0.EN0 el1;
  uint64 el2;
}
uint120 constant cons0 = ((((((uint120(0) * uint120(0)) - uint120(702059408821116769892572677630570585)) << uint88(uint88(111681245705749543650001389))) - uint120(1329227995784915872903807060280344575)) & uint120(0)) - uint120(154824231944281855218837465811597861));
// ----
// Warning 9592: (su0.sol:1982-2277): "switch" statement with only a default case.
// Warning 9592: (su0.sol:2500-2669): "switch" statement with only a default case.

==== Source:  ====

==== Source: su0.sol ====
pragma solidity >= 0.0.0;
contract C0 {
  int8  public s0;
  bool[3]  public s1 = [true, false, true];

	function compareMemoryAndStorage(bool[3] memory v1, bool[3] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  constructor(int8 i0)   {
    s0 /= (~(int8(0)));
    {
      payable(this).transfer(1465908774547485907);
      (s1[uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)]) = ((uint216(12344595736493466079273089844305383325973389002087677690082899711) != (false ? uint216(105312291668557186697918027683670432318895095400549111254310977535) : uint216((uint216(0) / uint216(28886629307732247952858010153575164065214449748355429296700885840))))));
      assert(s1[uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)] == (uint216(12344595736493466079273089844305383325973389002087677690082899711) != (false ? uint216(105312291668557186697918027683670432318895095400549111254310977535) : uint216((uint216(0) / uint216(28886629307732247952858010153575164065214449748355429296700885840))))));
      bool[3] memory l0 = s1;
      bool[3] memory l1 = l0;
      assert(compareMemoryAndStorage(l1, s1));
      int8  l2 = s0;
      int8  l3 = l2;
      assert(l3 == s0);
    }
  }
  receive() external   payable
  {
    bool[3] memory l0 = s1;
    bool[3] memory l1 = l0;
    assert(compareMemoryAndStorage(l1, s1));
    (bool l2, bytes memory l3) = payable(this).call{value: 12407584625987161324}("");
    (l0[uint256(((uint256(((((uint256(0) >> uint176(uint176(0))) << uint208(uint208(15782679056160039326420944337867998157287694861275806549036572))) % uint256(24614837751507247637662909196343471014350394884332940846971160597875609975381)) / uint256(114629961715412831747814170530009736181719777956005928168588533731201408716132))) - uint256(0)) / uint256(47969950372351828717094112338049982794757823618756492110185017239404071425994)))]) = (((((((uint112(5192296858534827628530496329220095) + uint112(2297333987245603700114748880497010)) & uint112(5192296858534827628530496329220095)) ^ uint112(5192296858534827628530496329220095)) | uint112(0)) != uint112(0)) != true));
    assert(l0[uint256(((uint256(((((uint256(0) >> uint176(uint176(0))) << uint208(uint208(15782679056160039326420944337867998157287694861275806549036572))) % uint256(24614837751507247637662909196343471014350394884332940846971160597875609975381)) / uint256(114629961715412831747814170530009736181719777956005928168588533731201408716132))) - uint256(0)) / uint256(47969950372351828717094112338049982794757823618756492110185017239404071425994)))] == ((((((uint112(5192296858534827628530496329220095) + uint112(2297333987245603700114748880497010)) & uint112(5192296858534827628530496329220095)) ^ uint112(5192296858534827628530496329220095)) | uint112(0)) != uint112(0)) != true));
  }
}

==== Source: su1.sol ====
pragma solidity >= 0.0.0;
// ----
// Warning 5667: (su0.sol:364-371): Unused function parameter. Remove or comment out the variable name to silence this warning.
// Warning 2072: (su0.sol:1531-1538): Unused local variable.
// Warning 2072: (su0.sol:1540-1555): Unused local variable.
// Warning 2018: (su0.sol:105-349): Function state mutability can be restricted to view

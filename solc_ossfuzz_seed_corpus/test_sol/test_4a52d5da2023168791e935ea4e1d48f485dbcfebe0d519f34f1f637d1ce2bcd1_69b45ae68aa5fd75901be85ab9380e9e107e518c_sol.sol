
==== Source: su0.sol ====
library L0 {
  error er0();
  bool public constant cons0 = true;
}
struct St0 {
  address el0;
  bytes20[] el1;
  address[4] el2;
  bytes10 el3;
}
contract C0 {
  fallback() external virtual  payable
  {
    payable(this).transfer(2606290866142845791);
  }
  using L0 for *;
  int256[5]   s0;

	function compareMemoryAndStorage(int256[5] memory v1, int256[5] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  bytes32  public s1 = bytes32(0x0000000000000000000000000000000000000000000000000000000000000000);
  constructor(int256[5] memory i0)   {
    s0 = i0;
    {
      (s0[uint256((true ? (s0[(uint256(0) << uint72(uint72(0)))] % int256(57896044618658097711785492504343953926634992332820282019728792003956564819967)) : int256(-44526623147845236087285766510322233497490669638035587772687234087270196150887)))]) = (int256(57896044618658097711785492504343953926634992332820282019728792003956564819967));
      assert(s0[uint256((true ? (s0[(uint256(0) << uint72(uint72(0)))] % int256(57896044618658097711785492504343953926634992332820282019728792003956564819967)) : int256(-44526623147845236087285766510322233497490669638035587772687234087270196150887)))] == int256(57896044618658097711785492504343953926634992332820282019728792003956564819967));
      revert L0.er0();
    }
  }
}
contract C1 is C0 {
  using L0 for *;
  function f1() external   
  {
    (bool l0) = payable(this).send(5991743058674383997);
  }
  using L0 for *;
  uint256   s2;
  constructor(int256[5] memory i0,uint256 i1)  C0(i0)
  {
    s0 = i0;
    s2 = (uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) ** uint216(uint216(0)));
    unchecked {
      int256[5] memory l0 = s0;
      int256[5] memory l1 = l0;
      assert(compareMemoryAndStorage(l1, s0));
      bytes32  l2 = s1;
      bytes32  l3 = l2;
      assert(l3 == s1);
    }
  }
  fallback() external virtual override  payable
  {
    {
      delete s0[(((uint256(0) & ((uint256(0) + uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) >> uint64(uint64(18446744073709551615)))) + uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) << uint72(uint72(4722366482869645213695)))];
      bytes32  l0 = s1;
      bytes32  l1 = l0;
      assert(l1 == s1);
      assembly
      {
        l1 := gasprice()
        let al0 := s1.offset
      }
      (s1) = (bytes32(0x0000000000000000000000000000000000000000000000000000000000000000));
      assert(s1 == bytes32(0x0000000000000000000000000000000000000000000000000000000000000000));
      s0 = ((((((int152(2711568543583392934274985850485037882732750382) | int152(-559750766132838698197475862050779074075341989)) - int152(0)) > int152(0)) ? false : true) ? true : true) ? [int256(57896044618658097711785492504343953926634992332820282019728792003956564819967), int256(0), int256(44064073561617194644144528448334564613991594089478396702566118508223284260920), int256(-27872967541846790688284578500079130845705043331560815452852297156670581250613), int256(57896044618658097711785492504343953926634992332820282019728792003956564819967)] : [int256(57896044618658097711785492504343953926634992332820282019728792003956564819967), int256(-54408749905914253696209737459822501561191824522353069094413693852434331665123), int256(57896044618658097711785492504343953926634992332820282019728792003956564819967), int256(25538013865093925594973603304082198075686545375926364888430732037208971503959), int256(42641215127144404813024423847851027109820177107568967466920223887919995503052)]);
      uint256  l2 = s2;
      uint256  l3 = l2;
      assert(l3 == s2);
    }
    (bool l4, bytes memory l5) = address(this).call(abi.encodeWithSelector(this.f1.selector));
  }
}
pragma solidity >= 0.0.0;

==== Source: su1.sol ====
pragma solidity >= 0.0.0;
// ====
// ----

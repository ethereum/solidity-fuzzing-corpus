
==== Source: su0.sol ====
contract C0 {
  mapping(int112 => int256)  public s0;
  address payable  public s1;
  bool   s2;
  address  public s3 = address(this);
  constructor(address payable i0,bool i1)   {
    s1 = payable(address(this));
    s2 = (uint104(5904528966167894748938483120811) < (uint96(26736566917833955340046703488) % uint104(20282409603651670423947251286015)));
    s0[int112(((((int240(667874184326363454791987252557995117440942022973051629708340749332087545) * int240(-307941709235395071729445191884202000494416731408411045170035387581664935)) | int240(0)) * int240(0)) + int240(0)))] *= (int256((((int256(((int256(57896044618658097711785492504343953926634992332820282019728792003956564819967) & int256(22967567507631315921563315502729439979104770909733657375180458067414748508484)) / int256(45204961269048272483365465623686006322127308747358087843456714307226896326095))) & int256(0)) | int256(-32111074659129134184074451083056494343676485960166640661608365527203469559725)) / int256(57896044618658097711785492504343953926634992332820282019728792003956564819967))) % int256(30029391862933025544003403523929253105503613814563759892544110655843679532557));
    {
      address payable  l0 = s1;
      address payable  l1 = l0;
      assert(l1 == s1);
      address  l2 = s3;
      address  l3 = l2;
      assert(l3 == s3);
      address payable  l4 = s1;
      address payable  l5 = l4;
      assert(l5 == s1);
    }
  }
  receive() external   payable
  {
    address payable  l0 = s1;
    address payable  l1 = l0;
    assert(l1 == s1);
    address  l2 = s3;
    address  l3 = l2;
    assert(l3 == s3);
    bool  l4 = s2;
    bool  l5 = l4;
    assert(l5 == s2);
  }
}
pragma solidity >= 0.0.0;
// ====
// ----

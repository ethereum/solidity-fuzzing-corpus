
==== Source: su0.sol ====
pragma solidity >= 0.0.0;
contract C0 {
  int64   s0;
  uint184   s1 = uint184(24519928653854221733733552434404946937899825954937634815);
  address[]  public s2;

	function compareMemoryAndStorage(address[] memory v1, address[] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  mapping(uint144 => int72[])   s3;
  constructor(int64 i0,address[] memory i1)   {
    s0 += (true ? int64(9223372036854775807) : int16(32767));
    s2 = i1;
    {
      (bool l0, bytes memory l1) = payable(this).call{value: 15821727408870191339}("");
    }
  }
  receive() external   payable
  {
    (s2[((uint256(((uint256(0) << uint232((uint232(0) * uint232(0)))) / uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))) ** uint72(uint72(3605846959074265904553))) | uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))], s0, s2[((uint208(uint176(46586992675175382715929521714142021894095231723130858)) <= ((~(uint208(120880142168903281114330058435867604132678990703723943309337825))) | uint208(188586475693220651571034589041637091814270221265109794875140272))) ? uint256(0) : uint256(0))]) = (address(this), int64(0), address(this));
    assert(s2[((uint256(((uint256(0) << uint232((uint232(0) * uint232(0)))) / uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))) ** uint72(uint72(3605846959074265904553))) | uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))] == address(this));
    assert(s0 == int64(0));
    assert(s2[((uint208(uint176(46586992675175382715929521714142021894095231723130858)) <= ((~(uint208(120880142168903281114330058435867604132678990703723943309337825))) | uint208(188586475693220651571034589041637091814270221265109794875140272))) ? uint256(0) : uint256(0))] == address(this));
    s2.pop();
  }
}

==== Source: su1.sol ====
pragma solidity >= 0.0.0;
// ====
// ----

==== Source:  ====

==== Source: su0.sol ====
contract C0 {
  receive() external virtual  payable
  {
    payable(this).transfer(0);
  }
  int240[7][9]   s0;

	function compareMemoryAndStorage(int240[7][9] memory v1, int240[7][9] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (!compareMemoryAndStorage(v1[i], v2[i]))

				return false;
		return true;
	}

	function compareMemoryAndStorage(int240[7] memory v1, int240[7] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  constructor(int240[7][9] memory i0) payable  {
    s0 = i0;
    {
      int240[7][9] memory l0 = s0;
      int240[7][9] memory l1 = l0;
      assert(compareMemoryAndStorage(l1, s0));
    }
  }
  fallback() external   
  {
    unchecked {
      int240[7][9] memory l0 = s0;
      int240[7][9] memory l1 = l0;
      assert(compareMemoryAndStorage(l1, s0));
      {
        int240[7][9] memory l2 = s0;
        int240[7][9] memory l3 = l2;
        assert(compareMemoryAndStorage(l3, s0));
        int240[7][9] memory l4 = s0;
        int240[7][9] memory l5 = l4;
        assert(compareMemoryAndStorage(l5, s0));
        int240[7][9] memory l6 = s0;
        int240[7][9] memory l7 = l6;
        assert(compareMemoryAndStorage(l7, s0));
        payable(this).transfer(6960718020656587177);
        (l4[(address(this).balance << uint32(uint32((uint32(4294967295) / uint32(1194376182)))))], l7[uint256((((((uint256(109367738388786532275104638067348327125525344709262064386658569975499551554849) & uint256(0)) ^ uint256(0)) ^ uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) << uint248(uint248(0))) / uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)))]) = ((false ? [int240(883423532389192164791648750371459257913741948437809479060803100646309887), int240(0), int240(883423532389192164791648750371459257913741948437809479060803100646309887), int240(883423532389192164791648750371459257913741948437809479060803100646309887), int240(494594071030297283848304915196886392881522726153807648109016626818152402), int240(-765155592579449793606159272778244985930242640869549866666350346588253720), int240(-256092052249011537248655697586446038410447257832280252937285061754156019)] : [int240(0), int240(-609692645591961474437375928057511295519239386859895309912116788178956561), int240(883423532389192164791648750371459257913741948437809479060803100646309887), int240(883423532389192164791648750371459257913741948437809479060803100646309887), int240(883423532389192164791648750371459257913741948437809479060803100646309887), int240(334565514776370743224383423936454505248205932962491208486190992979686555), int240(0)]), [int240(0), int240(883423532389192164791648750371459257913741948437809479060803100646309887), int240(883423532389192164791648750371459257913741948437809479060803100646309887), int240(0), int240(-824927208012699336925644996550771930169582604102109829905412033002796855), int240(883423532389192164791648750371459257913741948437809479060803100646309887), int240(700182814475694009240281566806321197627493367923645696547677815549502982)]);
        int240[7][9] memory l8 = s0;
        int240[7][9] memory l9 = l8;
        assert(compareMemoryAndStorage(l9, s0));
      }
    }
    int240[7][9] memory l10 = s0;
    int240[7][9] memory l11 = l10;
    assert(compareMemoryAndStorage(l11, s0));
    assert(false);
  }
}
pragma solidity >= 0.0.0;
// ----
// Warning 2018: (su0.sol:395-643): Function state mutability can be restricted to view

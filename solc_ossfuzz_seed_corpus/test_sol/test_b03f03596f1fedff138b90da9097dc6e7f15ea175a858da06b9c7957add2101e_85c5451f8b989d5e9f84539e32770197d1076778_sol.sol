
==== Source: su0.sol ====
contract C0 {
  int176 immutable public s0;
  int96  public s1;
  constructor(int176 i0,int96 i1) payable  {
    s0 = int176((int176((((int176(0) % int176(0)) ^ int176(47890485652059026823698344598447161988085597568237567)) / int176(0))) / int176(0)));
    s1 = (int96(0) ** uint160(uint160(1461501637330902918203684832716283019655932542975)));
    {
      (s1) = (int96((int96(39614081257132168796771975167) / (int96(-31376115370731521124341721751) ** uint168(uint168(((uint168(374144419156711147060143317175368453031918731001855) >> uint144(uint144(0))) / uint168(341691036197808969157909701772766534590285236361311))))))));
      assert(s1 == int96((int96(39614081257132168796771975167) / (int96(-31376115370731521124341721751) ** uint168(uint168(((uint168(374144419156711147060143317175368453031918731001855) >> uint144(uint144(0))) / uint168(341691036197808969157909701772766534590285236361311))))))));
      unchecked {
      }
      int176  l0 = s0;
      int176  l1 = l0;
      assert(l1 == s0);
    }
  }
  receive() external   payable
  {
    (s1) = ((int96(39614081257132168796771975167) & (int96(0) * int96(8768836531841250940067700829))));
    assert(s1 == (int96(39614081257132168796771975167) & (int96(0) * int96(8768836531841250940067700829))));
  }
}
pragma solidity >= 0.0.0;

==== Source: su1.sol ====
pragma solidity >= 0.0.0;
// ====
// ----

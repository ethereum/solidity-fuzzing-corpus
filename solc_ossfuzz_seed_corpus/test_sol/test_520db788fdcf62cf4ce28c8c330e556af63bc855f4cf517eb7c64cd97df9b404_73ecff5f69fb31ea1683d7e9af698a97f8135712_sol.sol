==== Source:  ====

==== Source: su0.sol ====
pragma solidity >= 0.0.0;
contract C0 {
  bool   s0 = false;
  address[]  public s1 = [address(0x0000000000000000000000000000000000000002), address(0x0000000000000000000000000000000000000007), address(0x0000000000000000000000000000000000000007), address(0x0000000000000000000000000000000000000008), address(0x0000000000000000000000000000000000000004), address(0x0000000000000000000000000000000000000006), address(0x0000000000000000000000000000000000000003)];

	function compareMemoryAndStorage(address[] memory v1, address[] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  int64   s2;
  constructor(int64 i0) payable  {
    s2 -= (int64(0) ** uint96(uint96(((uint96(52592611339753094911264849748) & uint96(79228162514264337593543950335)) / uint96(43406280141379250160092521244)))));
    {
      (s1[(uint256(((uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) - uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) / uint256(60701528783556540440902889694144444333466631502379999705375533399484473224892))) % uint256(0))], s1[((false ? (((uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) | uint256(0)) << uint40(uint40(1099511627775))) + uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) : uint256(25038860477749017488066541143566561106166676874905718498147163647048284544612)) - uint256(50826760654680348059430786198534918380136466747818866830554660452262941425698))]) = (address(this), s1[uint256(69585374929015137482418608949634210373138904181203885474863945488377601128404)]);
      assert(s1[(uint256(((uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) - uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) / uint256(60701528783556540440902889694144444333466631502379999705375533399484473224892))) % uint256(0))] == address(this));
      assert(s1[((false ? (((uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) | uint256(0)) << uint40(uint40(1099511627775))) + uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) : uint256(25038860477749017488066541143566561106166676874905718498147163647048284544612)) - uint256(50826760654680348059430786198534918380136466747818866830554660452262941425698))] == s1[uint256(69585374929015137482418608949634210373138904181203885474863945488377601128404)]);
    }
  }
  receive() external   payable
  {
    s1.push(ecrecover((bytes32(0x0000000000000000000000000000000000000000000000000000000000000000) | bytes10(0x1d9b652c5a763d054130)), uint8(0), sha256(bytes("2c8d14bbd76277c4af66664a988adfa1b32b44afb4be0dc183879597acebd190f35c8e0dfc46f6c2ead50f26c545a44faaff45b52ae43240b60f")), bytes32(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)));
    int64  l0 = s2;
    int64  l1 = l0;
    assert(l1 == s2);
  }
}
contract C1 {
  fallback() external   
  {
    bytes17 l0 = bytes17(0x71c097e75169cf77b4f40174a231ddba9c);
  }
  mapping(address => C0)   s3;
  int112  public s4 = int112(-1942307371729787237887642558328889);
  constructor() payable  {
    s3[address(this)] = C0(payable(address(this)));
    unchecked {
      assert(false);
      int112  l0 = s4;
      int112  l1 = l0;
      assert(l1 == s4);
    }
  }
}
// ----
// Warning 3149: (su0.sol:770-919): The result type of the exponentiation operation is equal to the type of the first operand (int64) ignoring the (larger) type of the second operand (uint96) which might be unexpected. Silence this warning by either converting the first or the second operand to the type of the other.
// Warning 5667: (su0.sol:738-746): Unused function parameter. Remove or comment out the variable name to silence this warning.
// Warning 2072: (su0.sol:3154-3164): Unused local variable.
// Warning 2018: (su0.sol:461-709): Function state mutability can be restricted to view

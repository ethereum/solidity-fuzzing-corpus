==== Source:  ====

==== Source: su0.sol ====
pragma solidity >= 0.0.0;
uint208 constant cons0 = ((((((uint208(411376139330301510538742295639337626245683966408394965837152255) * uint208(411376139330301510538742295639337626245683966408394965837152255)) * uint208(0)) ^ uint208(411376139330301510538742295639337626245683966408394965837152255)) * uint208(216083403721070675403597886670090503192681589278921503990317383)) << uint192(uint192(6277101735386680763835789423207666416102355444464034512895))) | uint208(268611888253729111879250803155757133061753902404010555143362787));
library L0 {
  uint240 public constant cons1 = (uint240(1086181945666802304837004273665508694500544759829884880638130016347095369) << uint144((uint144(22300745198530623141535718272648361505980415) - ((~(uint144(970433691531205750410985781909528148652319))) << uint224(uint224(13813511612699264717839068415817946529403610118095045048264150714631))))));
  modifier m0(bool[2] memory i0) 
  {
    _;
  }
  type T0 is address payable;
  error er0();
}
type T1 is uint104;
// ----
// Warning 3149: (su0.sol:730-876): The result type of the shift operation is equal to the type of the first operand (uint144) ignoring the (larger) type of the second operand (uint224) which might be unexpected. Silence this warning by either converting the first or the second operand to the type of the other.

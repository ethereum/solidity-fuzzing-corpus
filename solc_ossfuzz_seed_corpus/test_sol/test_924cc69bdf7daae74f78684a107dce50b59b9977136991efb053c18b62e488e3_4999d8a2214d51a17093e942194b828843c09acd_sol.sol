
==== Source: su0.sol ====
pragma solidity >= 0.0.0;
struct St0 {
  address payable el0;
  mapping(int128 => bool) el1;
  address el2;
}

==== Source: su1.sol ====
enum EN0 {
  M0, M1, M2, M3, M4, M5, M6, M7,
  M8, M9, M10, M11, M12, M13, M14, M15,
  M16, M17, M18, M19, M20, M21, M22, M23,
  M24, M25, M26, M27, M28, M29, M30, M31,
  M32, M33, M34, M35, M36, M37, M38, M39,
  M40, M41, M42, M43, M44, M45, M46, M47,
  M48, M49, M50, M51, M52, M53, M54, M55,
  M56, M57, M58, M59, M60, M61, M62, M63,
  M64, M65, M66, M67, M68, M69, M70, M71,
  M72, M73, M74, M75, M76, M77, M78, M79,
  M80, M81, M82, M83, M84, M85, M86, M87,
  M88, M89, M90, M91, M92, M93, M94, M95,
  M96, M97, M98, M99, M100, M101, M102, M103,
  M104, M105, M106, M107, M108, M109, M110, M111,
  M112, M113, M114, M115, M116, M117, M118, M119,
  M120, M121, M122, M123, M124, M125, M126, M127,
  M128, M129, M130, M131, M132, M133, M134, M135,
  M136, M137, M138, M139, M140, M141, M142, M143,
  M144, M145, M146, M147, M148, M149, M150, M151,
  M152, M153, M154, M155, M156, M157, M158, M159,
  M160, M161, M162, M163, M164, M165, M166, M167,
  M168, M169, M170, M171, M172, M173, M174, M175,
  M176, M177, M178, M179, M180, M181, M182, M183,
  M184, M185, M186, M187, M188, M189, M190, M191,
  M192, M193, M194, M195, M196, M197, M198, M199,
  M200, M201, M202, M203, M204, M205, M206, M207,
  M208, M209, M210, M211, M212, M213, M214, M215,
  M216, M217, M218, M219, M220, M221, M222, M223,
  M224, M225, M226, M227, M228, M229, M230, M231,
  M232, M233, M234, M235, M236, M237, M238, M239,
  M240, M241, M242, M243, M244, M245, M246, M247,
  M248, M249, M250, M251
}
pragma solidity >= 0.0.0;
contract C0 {
  error er0();
  int160  public s0;
  bytes   s1;

	function compareMemoryAndStorage(bytes memory v1, bytes storage v2) internal pure returns (bool) {
		return keccak256(bytes(v1)) == keccak256(bytes(v2));
	}
  constructor(int160 i0,bytes memory i1)   {
    s0 ^= int160((int160(((((bytes25(0xffffffffffffffffffffffffffffffffffffffffffffffffff) < bytes25(0x9d9cd19aef948c43ed1a8509fdfd5b12752c1feffa24b17f61)) ? int96(0) : int96(26616782258767827491686257234)) | int160(0)) / int160(730750818665451459101842416358141509827966271487))) / int160(730750818665451459101842416358141509827966271487)));
    s1 = bytes("ffffffffffffffffffffff");
    {
      (s0) = (int160((false ? (int224(12392115708278629044123596498236440487764410079936426821277455929314) & (int224(13479973333575319897333507543509815336818572211270286240551805124607) % int224(-2355406490957816128680351665200072139497274374172877126152034283978))) : int224(13479973333575319897333507543509815336818572211270286240551805124607))));
      assert(s0 == int160((false ? (int224(12392115708278629044123596498236440487764410079936426821277455929314) & (int224(13479973333575319897333507543509815336818572211270286240551805124607) % int224(-2355406490957816128680351665200072139497274374172877126152034283978))) : int224(13479973333575319897333507543509815336818572211270286240551805124607))));
      bytes memory l0 = s1;
      bytes memory l1 = l0;
      assert(compareMemoryAndStorage(l1, s1));
      (bool l2, bytes memory l3) = address(this).call(abi.encodePacked(uint72((uint72(4722366482869645213695) ^ uint72(561294952515824360491))), bytes11(bytes11(bytes26(0x0000000000000000000000000000000000000000000000000000))), payable(address(payable(address(this)))), bool(true)));
      s1.pop();
      int160  l4 = s0;
      int160  l5 = l4;
      assert(l5 == s0);
      int160  l6 = s0;
      int160  l7 = l6;
      assert(l7 == s0);
    }
  }
}
library L0 {
  error er1();
}
// ====
// ----

==== Source:  ====

==== Source: su0.sol ====
pragma solidity >= 0.0.0;
contract C0 {
  int192 immutable  s0 = int192(2377003292669325115134933206657498595750307013292085697696);
  int152   s1 = int152(2270767731262230349031118372458085913842656906);
  bool[10]  public s2;

	function compareMemoryAndStorage(bool[10] memory v1, bool[10] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  bytes23  public s3;
  constructor(bool[10] memory i0,bytes23 i1)   {
    s2 = i0;
    s3 &= bytes23(0x0000000000000000000000000000000000000000000000);
    {
      (s2[(uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) ^ (uint256(0) - uint256((uint112(3446157389776141637461960654993393) - uint112(5192296858534827628530496329220095)))))], s2[((uint256((uint64(190889102208672266) | uint64(0))) << uint16(uint16(0))) % uint256(0))]) = (true, (address(this) <= address(this)));
      assert(s2[(uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) ^ (uint256(0) - uint256((uint112(3446157389776141637461960654993393) - uint112(5192296858534827628530496329220095)))))] == true);
      assert(s2[((uint256((uint64(190889102208672266) | uint64(0))) << uint16(uint16(0))) % uint256(0))] == (address(this) <= address(this)));
      bool[10] memory l0 = s2;
      bool[10] memory l1 = l0;
      assert(compareMemoryAndStorage(l1, s2));
      bool[10] memory l2 = s2;
      bool[10] memory l3 = l2;
      assert(compareMemoryAndStorage(l3, s2));
      bytes23  l4 = s3;
      bytes23  l5 = l4;
      assert(l5 == s3);
      do
      {
      }
      while ((l0[uint256(((uint256(16144974208971097989198851164103838532259352154243264285349525497147349885850) ^ (((uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) & uint256(8035869956796705516775245109578504831878683227723365462726689673805629908546)) ^ uint256(0)) | uint256(112339296963324514692337611116253163193578721112923788051016148059904415044219))) / uint256(99720081162623362496281844059741206232817309837541183193864142501088543914745)))] = true));
      int192  l6 = s0;
      int192  l7 = l6;
      assert(l7 == s0);
    }
  }
  receive() external   payable
  {
    (bool l0) = payable(this).send(10523278972816341742);
    s2 = [true, true, false, false, false, true, true, true, true, false];
      assert(l0[uint256(((uint256(16144974208971097989198851164103838532259352154243264285349525497147349885850) ^ (((uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) & uint256(8035869956796705516775245109578504831878683227723365462726689673805629908546)) ^ uint256(0)) | uint256(112339296963324514692337611116253163193578721112923788051016148059904415044219))) / uint256(99720081162623362496281844059741206232817309837541183193864142501088543914745)))] == true);
  }
  fallback() external virtual  payable
  {
  }
}
// ----
// TypeError 2614: (su0.sol:2451-2453): Indexed expression has to be a type, mapping or array (is bool)

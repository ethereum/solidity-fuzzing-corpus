==== Source:  ====

==== Source: su0.sol ====
contract C0 {
  bool immutable  s0 = false;
  bool[]   s1;

	function compareMemoryAndStorage(bool[] memory v1, bool[] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  uint168   s2 = uint168(40424804654857475180237569691040083249464752189551);
  constructor(bool[] memory i0)   {
    s1 = i0;
    {
      (s1[(uint256(63547181432417094219319571374244150647041277358380555276587650497441175702759) % ((address(bytes20(address(0x20449209642D07B6540FB7397f657c9a326a0932))).balance * uint256(27644310693745792951619050339745427644005724069032473449964183535878163818688)) * uint256(115698542688735443457487374344839721912323540438372043175132215731682679721540)))]) = (s1[uint256(((~((((uint256(54237879961062453112383657297588356385541971144694736732555162876656714410371) ^ uint256(36939782368686534001762542954805666782996459992539013919075029207474851717031)) << uint208(uint208(367872197338198068229332945782515503318211939634724575712665526))) - uint256(0)))) / uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)))]);
      assert(s1[(uint256(63547181432417094219319571374244150647041277358380555276587650497441175702759) % ((address(bytes20(address(0x20449209642D07B6540FB7397f657c9a326a0932))).balance * uint256(27644310693745792951619050339745427644005724069032473449964183535878163818688)) * uint256(115698542688735443457487374344839721912323540438372043175132215731682679721540)))] == s1[uint256(((~((((uint256(54237879961062453112383657297588356385541971144694736732555162876656714410371) ^ uint256(36939782368686534001762542954805666782996459992539013919075029207474851717031)) << uint208(uint208(367872197338198068229332945782515503318211939634724575712665526))) - uint256(0)))) / uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)))]);
      bool  l0 = s0;
      bool  l1 = l0;
      assert(l1 == s0);
      bool[] memory l2 = s1;
      bool[] memory l3 = l2;
      assert(compareMemoryAndStorage(l3, s1));
      (bool l4, bytes memory l5) = address(this).call(bytes("ffffffffffffffffff5546d90758fc2cd5a7b73b19606d4c198c12b6036084dc893a86b12fd19576e5"));
      bool  l6 = s0;
      bool  l7 = l6;
      assert(l7 == s0);
    }
  }
}
pragma solidity >= 0.0.0;
// ----
// Warning 2072: (su0.sol:2138-2145): Unused local variable.
// Warning 2072: (su0.sol:2147-2162): Unused local variable.
// Warning 2018: (su0.sol:61-303): Function state mutability can be restricted to view

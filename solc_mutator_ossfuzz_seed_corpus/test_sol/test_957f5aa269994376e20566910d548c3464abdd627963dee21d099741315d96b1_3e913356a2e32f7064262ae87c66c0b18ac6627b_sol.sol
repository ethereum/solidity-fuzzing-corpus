
==== Source: su0.sol ====
contract C0 {
  fallback() external   payable
  {
  }
  int192[]   s0;

	function compareMemoryAndStorage(int192[] memory v1, int192[] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  constructor(int192[] memory i0)   {
    s0 = i0;
    unchecked {
      s0.push((((-(((s0[uint256(0)] | int192(0)) + int192(3138550867693340381917894711603833208051177722232017256447)))) ^ int192(3138550867693340381917894711603833208051177722232017256447)) - int192(-2422407378743837945002214109077482567576501632987845813790)));
      s0[(uint256(0) ^ (uint256((uint256(47153974393162602886563931377966107622706229142258617736816776029773743767263) / uint256(0))) ^ uint256(78259403100801345783755686501988825513006682805849251633829201443780951510711)))] *= int192((int192(-187607140956816283145690649385747750070074032789648657576) / (i0[uint256(0)] * (int192(3138550867693340381917894711603833208051177722232017256447) % int192(-2883604252042650759653592789612616499716251968226344680151)))));
      int192[] memory l0 = s0;
      int192[] memory l1 = l0;
      assert(compareMemoryAndStorage(l1, s0));
      s0.push();
      (i0[uint256(0)]) = ((((((int192(3138550867693340381917894711603833208051177722232017256447) | int192(0)) - int192(0)) * int192(0)) + int192(0)) % int192(-1447528626685682593702597298934199860053514137546600135095)));
      assert(i0[uint256(0)] == (((((int192(3138550867693340381917894711603833208051177722232017256447) | int192(0)) - int192(0)) * int192(0)) + int192(0)) % int192(-1447528626685682593702597298934199860053514137546600135095)));
      int192[] memory l2 = s0;
      int192[] memory l3 = l2;
      assert(compareMemoryAndStorage(l3, s0));
      int192[] memory l4 = s0;
      int192[] memory l5 = l4;
      assert(compareMemoryAndStorage(l5, s0));
    }
  }
}
pragma solidity >= 0.0.0;
// ====
// ----

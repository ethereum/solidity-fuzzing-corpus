
==== Source: su0.sol ====
pragma solidity >= 0.0.0;
library L0 {
  function f0() public   
  {
    uint160 l0 = (uint160(332986030963332303411389338284849936782579034740) ^ (true ? ((uint160(1461501637330902918203684832716283019655932542975) ** uint216(uint216(103638858900816688288780848172236375532571099001738074997617076102))) * uint160(0)) : uint160(0)));
  }
  function f1() private    returns(bytes16 o0,address payable o1)
  {
    address payable l0 = payable(address(0x0000000000000000000000000000000000000001));
    bytes memory l1 = bytes(string("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    o0 |= bytes1(0x79);
  }
}
contract C0 {
  using L0 for *;
  receive() external virtual  payable
  {
    payable(this).transfer(0);
  }
  fallback() external   
  {
  }
  address payable[10]   s0 = [payable(address(0x0000000000000000000000000000000000000001)), payable(address(0x0000000000000000000000000000000000000002)), payable(address(0x0000000000000000000000000000000000000005)), payable(address(0x0000000000000000000000000000000000000004)), payable(address(0x0000000000000000000000000000000000000002)), payable(address(0x0000000000000000000000000000000000000003)), payable(address(0x0000000000000000000000000000000000000005)), payable(address(0x0000000000000000000000000000000000000002)), payable(address(0x0000000000000000000000000000000000000003)), payable(address(0x0000000000000000000000000000000000000001))];

	function compareMemoryAndStorage(address payable[10] memory v1, address payable[10] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  int152   s1;
  mapping(bool => address)  public s2;
  constructor(int152 i0) payable  {
    s1 /= (((int152(2854495385411919762116571938898990272765493247) | int152(0)) % (int152(0) ** uint128(uint128(340282366920938463463374607431768211455)))) % int152(2854495385411919762116571938898990272765493247));
    s2[true] = address(this);
    unchecked {
      (s0[((uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) | (~((uint88(309485009821345068724781055) ** uint168(uint168(374144419156711147060143317175368453031918731001855)))))) - uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))], s0[(uint256((uint256(72189497346965421398218404145075955182097780344179384567858419608445810359927) / uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))) ** uint152((uint152((uint152(0) / uint152(5708990770823839524233143877797980545530986495))) | uint152(2351338210262179888943388884917598475128941754))))]) = (payable(address(this)), payable(address((~(bytes20(address(0xa674e3070B94ba743A4A720506d53BDBB74d14eF)))))));
      assert(s0[((uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) | (~((uint88(309485009821345068724781055) ** uint168(uint168(374144419156711147060143317175368453031918731001855)))))) - uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))] == payable(address(this)));
      assert(s0[(uint256((uint256(72189497346965421398218404145075955182097780344179384567858419608445810359927) / uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))) ** uint152((uint152((uint152(0) / uint152(5708990770823839524233143877797980545530986495))) | uint152(2351338210262179888943388884917598475128941754))))] == payable(address((~(bytes20(address(0xa674e3070B94ba743A4A720506d53BDBB74d14eF)))))));
      int152  l0 = s1;
      int152  l1 = l0;
      assert(l1 == s1);
      (bool l2, bytes memory l3) = payable(this).call{value: 0}("");
      int152  l4 = s1;
      int152  l5 = l4;
      assert(l5 == s1);
    }
  }
}
// ====
// ----

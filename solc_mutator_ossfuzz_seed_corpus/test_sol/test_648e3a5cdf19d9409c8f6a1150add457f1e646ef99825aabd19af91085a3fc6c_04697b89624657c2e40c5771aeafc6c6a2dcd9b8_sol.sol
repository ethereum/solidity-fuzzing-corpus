
==== Source: su0.sol ====
contract C0 {
  fallback() external   
  {
  }
  int184[]  public s0 = [int184(0), int184(-9436303158597973854379760687988513658661849750400967102), int184(0), int184(-9188957714838262489947849745922582660361292923223758646), int184(-1636114823426854386016178007533762996954772802105192264), int184(0), int184(12259964326927110866866776217202473468949912977468817407), int184(12259964326927110866866776217202473468949912977468817407), int184(6755080505779753875484230370226604573967633232608932637), int184(10460514620299033532056742547791453411630439288659626119)];

	function compareMemoryAndStorage(int184[] memory v1, int184[] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  uint160   s1;
  address   s2;
  constructor(uint160 i0,address i1) payable  {
    s1 <<= (uint160(1461501637330902918203684832716283019655932542975) - (true ? ((uint160(0) - uint160(1193618786590420680586985310601028132965079105039)) + uint160(0)) : uint160(0)));
    s2 = address(this);
    {
      uint160  l0 = s1;
      uint160  l1 = l0;
      assert(l1 == s1);
      address  l2 = s2;
      address  l3 = l2;
      assert(l3 == s2);
      s0.push((-((~((int184(12259964326927110866866776217202473468949912977468817407) ^ (int184((int184(12259964326927110866866776217202473468949912977468817407) / int184(10426843357976886552290441215699403884824612977706442015))) % int184(12259964326927110866866776217202473468949912977468817407))))))));
    }
  }
}
pragma solidity >= 0.0.0;
// ====
// ----

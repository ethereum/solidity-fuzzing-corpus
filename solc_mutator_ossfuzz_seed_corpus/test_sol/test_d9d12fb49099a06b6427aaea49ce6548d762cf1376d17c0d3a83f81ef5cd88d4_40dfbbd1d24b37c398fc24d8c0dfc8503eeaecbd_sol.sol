==== Source:  ====

==== Source: su0.sol ====
pragma solidity >= 0.0.0;
type T0 is bool;

using {



eq0 as ==, neq0 as !=

} for T0 global;






function eq0(T0 x, T0 y) pure returns (bool) { return T0.unwrap(x) == T0.unwrap(y); }

function neq0(T0 x, T0 y) pure returns (bool) { return T0.unwrap(x) != T0.unwrap(y); }



contract C0 {
  int80  public s0;
  mapping(T0 => mapping(bool => int88))  public s1;
  constructor(int80 i0) payable  {
    s0 -= (int80(0) | ((int80(534321558364088364765711) % int80(0)) * int80(-188228375897638164235745)));
    {
    }
  }
  receive() external virtual  payable
  {
    s0 /= int80((int80(604462909807314587353087) / ((((int80(0) | int80(604462909807314587353087)) + int80(364865625426969729462721)) * int80(-174347014476258220886638)) & int80(468245349628228172358696))));
    assembly
    {
      pop(sload(115792089237316195423570985008687907853269984665640564039457584007913129639935))
      returndatacopy(add(0x80, mod(107083000605517244796907185626930257834489415493842612812818638838832921902173, 1024)), s1.offset, mod(0, 1024))
      let al0 := s1.offset
      switch al0
      case 115792089237316195423570985008687907853269984665640564039457584007913129639935
      {
      }
    }
  }
}

==== Source: su1.sol ====
import "su0.sol";
pragma solidity >= 0.0.0;
contract C1 {
  address[][]  public s2 = [[address(0x0000000000000000000000000000000000000003), address(0x0000000000000000000000000000000000000008), address(0x0000000000000000000000000000000000000005), address(0x0000000000000000000000000000000000000008)], [address(0x0000000000000000000000000000000000000002), address(0x0000000000000000000000000000000000000001), address(0x0000000000000000000000000000000000000003), address(0x0000000000000000000000000000000000000003)], [address(0x0000000000000000000000000000000000000002), address(0x0000000000000000000000000000000000000008), address(0x0000000000000000000000000000000000000001), address(0x0000000000000000000000000000000000000004)], [address(0x0000000000000000000000000000000000000003), address(0x0000000000000000000000000000000000000001), address(0x0000000000000000000000000000000000000008), address(0x0000000000000000000000000000000000000008)], [address(0x0000000000000000000000000000000000000003), address(0x0000000000000000000000000000000000000007), address(0x0000000000000000000000000000000000000007), address(0x0000000000000000000000000000000000000002)], [address(0x0000000000000000000000000000000000000002), address(0x0000000000000000000000000000000000000007), address(0x0000000000000000000000000000000000000005), address(0x0000000000000000000000000000000000000007)], [address(0x0000000000000000000000000000000000000006), address(0x0000000000000000000000000000000000000001), address(0x0000000000000000000000000000000000000005), address(0x0000000000000000000000000000000000000001)], [address(0x0000000000000000000000000000000000000002), address(0x0000000000000000000000000000000000000005), address(0x0000000000000000000000000000000000000007), address(0x0000000000000000000000000000000000000008)], [address(0x0000000000000000000000000000000000000008), address(0x0000000000000000000000000000000000000005), address(0x0000000000000000000000000000000000000001), address(0x0000000000000000000000000000000000000003)]];

	function compareMemoryAndStorage(address[][] memory v1, address[][] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (!compareMemoryAndStorage(v1[i], v2[i]))

				return false;
		return true;
	}

	function compareMemoryAndStorage(address[] memory v1, address[] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  fallback() external   
  {
    (bool l0, bytes memory l1) = address(this).call(bytes(string("bc59451bff70533cbb2f4a58952ee8dff4c65d1ebc9f0e418d88a259b2750c4b9352ebf1978a2a0d8deac916a020")));
  }
}
// ----
// Warning 5667: (su0.sol:378-386): Unused function parameter. Remove or comment out the variable name to silence this warning.
// Warning 2072: (su1.sol:2577-2584): Unused local variable.
// Warning 2072: (su1.sol:2586-2601): Unused local variable.
// Warning 2018: (su1.sol:2294-2542): Function state mutability can be restricted to view

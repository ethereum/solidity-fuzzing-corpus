
==== Source: su0.sol ====
pragma solidity >= 0.0.0;
contract C0 {
  fallback() external   
  {
    assembly
    {
      calldatacopy(add(0x80, mod(0, 1024)), 88063501643935286668415638645349799726492980351443268658817623911691796588225, mod(mload(add(0x80, mod(0, 1024))), 1024))
      switch 115792089237316195423570985008687907853269984665640564039457584007913129639935
      default
      {
        return(115792089237316195423570985008687907853269984665640564039457584007913129639935, prevrandao())
      }
      extcodecopy(115792089237316195423570985008687907853269984665640564039457584007913129639935, add(0x80, mod(115792089237316195423570985008687907853269984665640564039457584007913129639935, 1024)), 115792089237316195423570985008687907853269984665640564039457584007913129639935, mod(115792089237316195423570985008687907853269984665640564039457584007913129639935, 1024))
    }
    function () external   returns (int32, bytes1, int16) l0;
    uint56 l1 = (uint56((uint56(72057594037927935) / (uint56(((uint56(0) << uint8(uint8(101))) / uint56(0))) | uint56(72057594037927935)))) & uint56(0));
  }
  int48  public s0;
  mapping(bool => uint168)  public s1;
  constructor(int48 i0) payable  {
    s0 -= int48(8198674042906);
    s1[(((int152(-127536058880297062989770308787537181091467762) | ((int152(-2099194223884400373133966209960536955358321326) & int152(-1710810759717337640030976233229750094447565264)) | int152(0))) * int152(0)) > int152(0))] += ((((((uint168(374144419156711147060143317175368453031918731001855) << uint248(uint248(452312848583266388373324160190187140051835877600158453279131187530910662655))) ^ uint168(12878383826292784924461013683868193084700714058813)) | uint168(374144419156711147060143317175368453031918731001855)) ^ uint168(46360839415875558340665865340977974607753671904148)) ** uint232(uint232(6901746346790563787434755862277025452451108972170386555162524223799295))) - uint168(0));
    unchecked {
      int48  l0 = s0;
      int48  l1 = l0;
      assert(l1 == s0);
      int48  l2 = s0;
      int48  l3 = l2;
      assert(l3 == s0);
    }
  }
}
// ====
// ----

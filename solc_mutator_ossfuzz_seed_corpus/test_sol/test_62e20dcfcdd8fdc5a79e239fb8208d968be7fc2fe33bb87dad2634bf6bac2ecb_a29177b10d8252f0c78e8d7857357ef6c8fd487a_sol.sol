==== Source:  ====

==== Source: su0.sol ====
pragma solidity >= 0.0.0;
contract C0 {
  int144  public s0;
  mapping(address => uint200)  public s1;
  int72[9]   s2 = [int72(2361183241434822606847), int72(2361183241434822606847), int72(2361183241434822606847), int72(0), int72(0), int72(-64618252688810866566), int72(0), int72(2361183241434822606847), int72(-989472046977854560059)];

	function compareMemoryAndStorage(int72[9] memory v1, int72[9] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  int200   s3 = int200(-355910204369917096816112738364564651860881015298017098330889);
  constructor(int144 i0)   {
    s0 += int144(0);
    s1[address(bytes20(address(0x0000000000000000000000000000000000000000)))] /= ((uint200(((((uint200(1606938044258990275541962092341162602522202993782792835301375) % uint200(0)) ^ uint200(1606938044258990275541962092341162602522202993782792835301375)) ^ uint200(0)) / uint200(0))) % uint200(203145564682242291165307934631187222757785609274703867802026)) | uint200(0));
    {
      s2[uint256(((uint16(0) | (uint16(65535) % uint16(0))) % uint16(48457)))] &= int72(-1092518625077136869743);
      unchecked {
        (s2, s2[((~((((uint256(int256(57896044618658097711785492504343953926634992332820282019728792003956564819967)) * uint256(0)) & uint256(50779691363471506476943432262791048814500638708618242381534880882031482073009)) - uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)))) | uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))], s3) = ([int72(2361183241434822606847), int72(2361183241434822606847), int72(0), int72(2361183241434822606847), int72(2361183241434822606847), int72(0), int72(0), int72(2361183241434822606847), int72(0)], (((int72((int64(-7773155581109235204) | int64(1403032664003731149))) + int72(0)) % int72(508825187596084021588)) * int72(0)), (int200((int200((uint200(0) % uint200(1606938044258990275541962092341162602522202993782792835301375))) / int200(0))) & int200(803469022129495137770981046170581301261101496891396417650687)));
        assert(s2[((~((((uint256(int256(57896044618658097711785492504343953926634992332820282019728792003956564819967)) * uint256(0)) & uint256(50779691363471506476943432262791048814500638708618242381534880882031482073009)) - uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)))) | uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))] == (((int72((int64(-7773155581109235204) | int64(1403032664003731149))) + int72(0)) % int72(508825187596084021588)) * int72(0)));
        assert(s3 == (int200((int200((uint200(0) % uint200(1606938044258990275541962092341162602522202993782792835301375))) / int200(0))) & int200(803469022129495137770981046170581301261101496891396417650687)));
        revert(string("000000000000"));
      }
      int200  l0 = s3;
      int200  l1 = l0;
      assert(l1 == s3);
      s2[uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)] ^= int72(0);
      {
        int144  l2 = s0;
        int144  l3 = l2;
        assert(l3 == s0);
        s2[uint40(1099511627775)] ^= ((int72(0) % (int72(954549740407729387444) | int72(2361183241434822606847))) % int72(1990861318573846280973));
        int200  l4 = s3;
        int200  l5 = l4;
        assert(l5 == s3);
      }
    }
  }
  fallback() external   
  {
  }
  receive() external virtual  payable
  {
    payable(this).transfer(7973232663676143835);
    int144  l0 = s0;
    int144  l1 = l0;
    assert(l1 == s0);
    return;
  }
}

==== Source: su1.sol ====
pragma solidity >= 0.0.0;
// ----
// Warning 5740: (su0.sol:2967-3029): Unreachable code.
// Warning 5740: (su0.sol:3037-3457): Unreachable code.
// Warning 5667: (su0.sol:688-697): Unused function parameter. Remove or comment out the variable name to silence this warning.
// Warning 2018: (su0.sol:340-586): Function state mutability can be restricted to view


==== Source: su0.sol ====
contract C0 {
  event ev0(function () external   returns (function (bool) external   returns (function (bytes31, bytes22) external  , bool, bool[9] memory), bool)  ep0, address payable  ep1);
  bytes27   s0;
  int184   s1 = int184(0);
  constructor(bytes27 i0)   {
    s0 = bytes27(0x000000000000000000000000000000000000000000000000000000);
    {
      int184  l0 = s1;
      int184  l1 = l0;
      assert(l1 == s1);
      bytes27  l2 = s0;
      bytes27  l3 = l2;
      assert(l3 == s0);
    }
  }
  fallback() external   
  {
    assembly
    {
      switch 115792089237316195423570985008687907853269984665640564039457584007913129639935
      case 0
      {
        switch s0.offset
        case 115792089237316195423570985008687907853269984665640564039457584007913129639935
        {
          if sload(16001957404276700122379144575322714877387228043463175220871124155557229962400)
          {
            stop()
          }
          switch mul(s1.offset, 98896578738648455056936421280510860073650245550438418824112792739428065919529)
          case 0
          {
          }
          case 115792089237316195423570985008687907853269984665640564039457584007913129639935
          {
            let al0 := 0
            {
              calldatacopy(add(0x80, mod(number(), 1024)), al0, mod(al0, 1024))
              codecopy(add(0x80, mod(al0, 1024)), al0, mod(mul(al0, 26037568149187512578284292027638785213604690330481722727451476771215372252623), 1024))
            }
          }
        }
        case 27821466058991597995859513302665921144633359669077897669085066093897948370784
        {
        }
        for 
        { let yulinit0 := 0 } lt(yulinit0, mod(59764664730575531743227192826532748280097165088874150304134120698610470614678, 11)) { yulinit0 := add(yulinit0, 1) }
        {
          let al1 := 115792089237316195423570985008687907853269984665640564039457584007913129639935
          break
        }
      }
      case 115792089237316195423570985008687907853269984665640564039457584007913129639935
      {
      }
    }
    int184  l0 = s1;
    int184  l1 = l0;
    assert(l1 == s1);
  }
}
pragma solidity >= 0.0.0;
// ====
// ----

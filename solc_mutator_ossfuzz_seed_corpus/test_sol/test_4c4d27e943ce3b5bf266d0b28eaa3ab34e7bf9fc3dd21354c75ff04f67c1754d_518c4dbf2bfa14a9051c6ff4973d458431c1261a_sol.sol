
==== Source: su0.sol ====
contract C0 {
  bytes24[]   s0;

	function compareMemoryAndStorage(bytes24[] memory v1, bytes24[] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  constructor(bytes24[] memory i0)   {
    s0 = i0;
    unchecked {
      s0.push();
      (i0[uint256(uint168(374144419156711147060143317175368453031918731001855))], i0[(((((uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) * uint256(0)) + uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) + uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) >> uint64(uint64(0))) - uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))]) = (bytes24(0x000000000000000000000000000000000000000000000000), ((bytes24(0x6fedbeb47b91cd4683e918a2b53e5b4d346add9f59491a7a) | bytes24(0xffffffffffffffffffffffffffffffffffffffffffffffff)) ^ bytes24(0xffffffffffffffffffffffffffffffffffffffffffffffff)));
      assert(i0[uint256(uint168(374144419156711147060143317175368453031918731001855))] == bytes24(0x000000000000000000000000000000000000000000000000));
      assert(i0[(((((uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) * uint256(0)) + uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) + uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) >> uint64(uint64(0))) - uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))] == ((bytes24(0x6fedbeb47b91cd4683e918a2b53e5b4d346add9f59491a7a) | bytes24(0xffffffffffffffffffffffffffffffffffffffffffffffff)) ^ bytes24(0xffffffffffffffffffffffffffffffffffffffffffffffff)));
      bytes24[] memory l0 = s0;
      bytes24[] memory l1 = l0;
      assert(compareMemoryAndStorage(l1, s0));
    }
  }
  receive() external virtual  payable
  {
    assembly
    {
    }
    s0[(((address(this).balance - (uint256(0) & uint256(97076435279280515410518360996351481382191002265461931066304024282878392485925))) >> uint240(uint240(1766847064778384329583297500742918515827483896875618958121606201292619775))) & uint256(103445895438643021503257584267587190464311507575436084888895214000661099947591))] = bytes24(0xffffffffffffffffffffffffffffffffffffffffffffffff);
    assert(s0[(((address(this).balance - (uint256(0) & uint256(97076435279280515410518360996351481382191002265461931066304024282878392485925))) >> uint240(uint240(1766847064778384329583297500742918515827483896875618958121606201292619775))) & uint256(103445895438643021503257584267587190464311507575436084888895214000661099947591))] == bytes24(0xffffffffffffffffffffffffffffffffffffffffffffffff));
  }
}
pragma solidity >= 0.0.0;
contract C1 {
  mapping(uint24 => mapping(int80 => C0))  public s1;
  bool  public s2 = false;
  uint104   s3 = uint104(8837573036790644737708658765546);
  constructor()   {
    {
      uint104  l0 = s3;
      uint104  l1 = l0;
      assert(l1 == s3);
      uint104  l2 = s3;
      uint104  l3 = l2;
      assert(l3 == s3);
      0;
      uint104  l4 = s3;
      uint104  l5 = l4;
      assert(l5 == s3);
      bool  l6 = s2;
      bool  l7 = l6;
      assert(l7 == s2);
    }
  }
}
// ====
// ----

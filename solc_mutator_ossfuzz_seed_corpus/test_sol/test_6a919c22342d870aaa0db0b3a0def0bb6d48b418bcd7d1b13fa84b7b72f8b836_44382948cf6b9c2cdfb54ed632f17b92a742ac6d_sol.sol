
==== Source: su0.sol ====
pragma solidity >= 0.0.0;
library L0 {
  function f0() public    returns(uint80 o0)
  {
    address l0 = address(0x0000000000000000000000000000000000000008);
    uint80 l1 = uint80(602606908766346058306626);
    uint192[][] memory l2 = new uint192[][](8);
    address payable l3 = payable(address(0x0000000000000000000000000000000000000003));
  }
  enum EN0 {
    M0, M1, M2, M3, M4, M5, M6, M7,
    M8, M9, M10, M11, M12, M13, M14, M15,
    M16, M17, M18, M19, M20, M21, M22, M23,
    M24, M25, M26, M27, M28, M29, M30, M31,
    M32, M33, M34, M35, M36, M37, M38, M39,
    M40, M41, M42, M43, M44, M45, M46, M47,
    M48, M49, M50, M51, M52, M53, M54, M55,
    M56, M57, M58, M59, M60, M61, M62, M63,
    M64, M65, M66, M67, M68, M69, M70, M71,
    M72, M73, M74, M75, M76, M77, M78, M79,
    M80, M81, M82, M83, M84, M85, M86, M87,
    M88, M89, M90, M91, M92, M93, M94, M95,
    M96, M97, M98, M99, M100, M101, M102, M103,
    M104, M105, M106, M107, M108, M109, M110, M111,
    M112, M113, M114, M115, M116, M117, M118, M119,
    M120, M121, M122, M123, M124, M125, M126, M127,
    M128, M129, M130, M131, M132, M133, M134, M135,
    M136, M137, M138, M139, M140, M141, M142, M143,
    M144, M145, M146, M147, M148, M149, M150, M151,
    M152, M153, M154, M155, M156, M157, M158, M159,
    M160, M161, M162, M163, M164, M165, M166, M167,
    M168, M169, M170, M171, M172, M173, M174, M175,
    M176, M177, M178, M179, M180, M181, M182, M183,
    M184, M185, M186, M187, M188, M189, M190, M191,
    M192, M193, M194, M195, M196, M197, M198, M199,
    M200, M201, M202, M203, M204, M205, M206, M207,
    M208, M209, M210, M211, M212, M213, M214, M215,
    M216, M217, M218, M219, M220, M221, M222, M223,
    M224, M225, M226, M227, M228, M229, M230, M231,
    M232, M233, M234, M235, M236, M237, M238, M239,
    M240, M241, M242, M243
  }
}
contract C0 {
  using L0 for *;
  enum EN1 {
    M0, M1, M2, M3, M4, M5, M6, M7,
    M8, M9, M10, M11, M12, M13, M14, M15,
    M16, M17, M18, M19, M20, M21, M22, M23,
    M24, M25, M26, M27, M28, M29, M30, M31,
    M32, M33, M34, M35, M36, M37, M38, M39,
    M40, M41, M42, M43, M44, M45, M46, M47,
    M48, M49, M50, M51, M52, M53, M54, M55,
    M56, M57, M58, M59, M60, M61, M62, M63,
    M64, M65, M66, M67, M68, M69, M70, M71,
    M72, M73, M74, M75, M76, M77, M78, M79,
    M80, M81, M82, M83, M84, M85, M86, M87,
    M88, M89, M90, M91, M92, M93, M94, M95,
    M96, M97, M98, M99, M100, M101, M102, M103,
    M104, M105, M106, M107, M108, M109, M110, M111,
    M112, M113, M114, M115, M116, M117, M118, M119,
    M120, M121, M122, M123, M124, M125, M126, M127,
    M128, M129, M130, M131, M132, M133, M134, M135,
    M136, M137, M138, M139, M140
  }
  mapping(int80 => C0.EN1)   s0;
  bytes28   s1 = bytes28(0x00000000000000000000000000000000000000000000000000000000);
  uint80   s2 = uint80(756958580197445167704942);
  constructor()   {
    s0[((((int80(0) & int80(604462909807314587353087)) & int80(604462909807314587353087)) & int80(604462909807314587353087)) % int80(604462909807314587353087))] = C0.EN1((((int128(170141183460469231731687303715884105727) % (int128(-99085876426638959900915090976839108693) % int128(-71054127561322268702828336672640270357))) - int128(64119577689935435078772013456298263430)) ^ int128(0)));
    {
      do
      {
        function (address payable, function (uint104[][] memory, bytes6[][9][] memory, bool) external  ) internal   returns (address) l0;
        (bool l1, bytes memory l2) = address(this).call((true ? (((~(bytes23(0x0000000000000000000000000000000000000000000000))) < bytes23(0xffffffffffffffffffffffffffffffffffffffffffffff)) ? bytes("0000000000") : bytes("00000000000000000000000000000000000000")) : bytes("e97d38d7a31cc2d379300ecf53308e8caec03029de65385731a59ad9c7b345c2c93bc83d027ab9d7")));
      }
      while (false);
      uint80  l3 = s2;
      uint80  l4 = l3;
      assert(l4 == s2);
    }
  }
  using L0 for *;
}
// ====
// ----

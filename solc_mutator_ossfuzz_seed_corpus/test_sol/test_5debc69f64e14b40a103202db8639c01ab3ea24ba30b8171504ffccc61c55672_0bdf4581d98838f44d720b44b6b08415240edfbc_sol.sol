==== Source:  ====

==== Source: su0.sol ====
pragma solidity >= 0.0.0;
function f0(bytes1 i0)     returns(address payable o0,bytes12 o1)
{
  {
    assembly
    {
      switch 0
      case 0
      {
        function af0(ai0, ai1, ai2, ai3, ai4, ai5, ai6, ai7, ai8, ai9, ai10, ai11, ai12) -> ao0, ao1, ao2, ao3, ao4, ao5, ao6, ao7, ao8, ao9, ao10, ao11, ao12, ao13, ao14, ao15, ao16, ao17
        {
          calldatacopy(add(0x80, mod(ai4, 1024)), 115792089237316195423570985008687907853269984665640564039457584007913129639935, mod(calldataload(mod(calldataload(mod(13217026472055857927041877351012436872876244092553696916488501341743702373320, calldatasize())), calldatasize())), 1024))
          switch mload(add(0x80, mod(115792089237316195423570985008687907853269984665640564039457584007913129639935, 2048)))
          case 30146386927870198632182396603307797911990728503992382994409027174434822428051
          {
            switch extcodehash(113516239469448541065656272930578903941705528664562442719613450033047830540056)
            case 115792089237316195423570985008687907853269984665640564039457584007913129639935
            {
              leave
            }
          }
          for 
          { let yulinit0 := 0 } lt(yulinit0, mod(0, 11)) { yulinit0 := add(yulinit0, 1) }
          {
            if ai10
            {
              return(add(0x80, mod(ai4, 1024)), 74928731143331921051186835233360800325583724444513128065254398562617808812701)
            }
            let al0, al1, al2, al3, al4, al5, al6, al7, al8, al9, al10, al11, al12, al13, al14, al15, al16, al17 := af0(ai8, ai5, 0, 98131947042994249101062100964926777031184039076270325012055974697131213214817, 0, 0, 54561195785570127289713597584074330031630796812362526393701148656883875613303, 0, 88695623326122498467883140815783565777697053947574325826151015710586185527385, 0, 0, 0, 0)
            switch ai12
            default
            {
            }
            let al18 := eq(13944525839468325971333454870310021311471569412412545269712971334490175734399, 0)
          }
        }
        let al19 := 115792089237316195423570985008687907853269984665640564039457584007913129639935
      }
      case 115792089237316195423570985008687907853269984665640564039457584007913129639935
      {
        o1 := i0
        returndatacopy(add(0x80, mod(i0, 1024)), i0, mod(i0, 1024))
      }
      for 
      {
      }
      mulmod(mload(add(0x80, mod(i0, 1024))), 115792089237316195423570985008687907853269984665640564039457584007913129639935, 0)
      {
        switch i0
        case 0
        {
        }
        case 115792089237316195423570985008687907853269984665640564039457584007913129639935
        {
          let al20 := 0
        }
      }
      {
        for 
        { let yulinit1 := 0 } lt(yulinit1, mod(0, 11)) { yulinit1 := add(yulinit1, 1) }
        {
          o1 := 57464326156432523478158513839248289566609478585171316806624978849376039517505
          return(0, i0)
        }
      }
    }
    (o0) = (payable(address(0x0000000000000000000000000000000000000006)));
    assert(o0 == payable(address(0x0000000000000000000000000000000000000006)));
  }
  address l0 = address(0x0000000000000000000000000000000000000006);
  assembly
  {
    pop(0)
    o0 := or(i0, 10670251759139567108572048373488485386039168466637141006027179283892913489935)
    returndatacopy(add(0x80, mod(0, 1024)), 25917171713315315140706145451364285406082303404377780351352018524619539890791, mod(31749134828126705680062311674598039906268059711072918032626645090992677090181, 1024))
    revert(add(0x80, mod(ai4, 1024)), xor(i0, 115792089237316195423570985008687907853269984665640564039457584007913129639935))
  }
}
// ----
// Warning 9592: (su0.sol:1834-1893): "switch" statement with only a default case.
// DeclarationError 8198: (su0.sol:3532-3535): Identifier "ai4" not found.

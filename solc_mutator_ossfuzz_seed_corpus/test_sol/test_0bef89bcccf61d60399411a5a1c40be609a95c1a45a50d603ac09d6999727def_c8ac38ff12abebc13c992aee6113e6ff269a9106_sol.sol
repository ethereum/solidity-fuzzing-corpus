
==== Source: su0.sol ====
contract C0 {
  fallback() external virtual  payable
  {
    (bool l0) = payable(this).send(0);
    int200 l1 = (int200((uint200(1606938044258990275541962092341162602522202993782792835301375) % (uint200(0) << uint96(uint96(79228162514264337593543950335))))) % int200(803469022129495137770981046170581301261101496891396417650687));
    bool l2 = (false == true);
  }
  modifier m0(bool i0) virtual
  {
    i0 = (true ? (uint112(5192296858534827628530496329220095) < ((uint112(5192296858534827628530496329220095) + uint112(5192296858534827628530496329220095)) % uint112(2727452875201193177120417621302017))) : true);
    assert(i0 == (true ? (uint112(5192296858534827628530496329220095) < ((uint112(5192296858534827628530496329220095) + uint112(5192296858534827628530496329220095)) % uint112(2727452875201193177120417621302017))) : true));
    _;
  }
  uint248 immutable  s0 = uint248(0);
  address[5]   s1;

	function compareMemoryAndStorage(address[5] memory v1, address[5] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  address payable   s2;
  address payable immutable  s3 = payable(address(this));
  constructor(address[5] memory i0,address payable i1)   {
    s1 = i0;
    s2 = payable(address(this));
    {
      address payable  l0 = s2;
      address payable  l1 = l0;
      assert(l1 == s2);
      uint248  l2 = s0;
      uint248  l3 = l2;
      assert(l3 == s0);
      i0[(address(this).balance | uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))] = s1[(~(uint256(((((uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) % uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) + uint256(20069261431856384878079417492336544966504021715145039906590216052639069770512)) - uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) / uint256(0)))))];
      assert(i0[(address(this).balance | uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))] == s1[(~(uint256(((((uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) % uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) + uint256(20069261431856384878079417492336544966504021715145039906590216052639069770512)) - uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) / uint256(0)))))]);
      address payable  l4 = s2;
      address payable  l5 = l4;
      assert(l5 == s2);
    }
  }
  receive() external   payable
  {
  }
}
pragma solidity >= 0.0.0;
library L0 {
  event ev0();
  event ev1(int256[][][][][]  ep0, int256  ep1);
  event ev2(uint40 indexed ep0, bytes7  ep1, int72  ep2);
}
// ====
// ----

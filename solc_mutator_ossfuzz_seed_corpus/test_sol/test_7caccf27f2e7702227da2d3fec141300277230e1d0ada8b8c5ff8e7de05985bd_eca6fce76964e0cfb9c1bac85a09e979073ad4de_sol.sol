
==== Source: su0.sol ====
pragma solidity >= 0.0.0;
contract C0 {
  bool   s0;
  uint8  public s1 = uint8(255);
  address[6][]   s2 = [[address(0x0000000000000000000000000000000000000007), address(0x0000000000000000000000000000000000000001), address(0x0000000000000000000000000000000000000005), address(0x0000000000000000000000000000000000000001), address(0x0000000000000000000000000000000000000006), address(0x0000000000000000000000000000000000000004)], [address(0x0000000000000000000000000000000000000007), address(0x0000000000000000000000000000000000000005), address(0x0000000000000000000000000000000000000002), address(0x0000000000000000000000000000000000000003), address(0x0000000000000000000000000000000000000002), address(0x0000000000000000000000000000000000000004)], [address(0x0000000000000000000000000000000000000004), address(0x0000000000000000000000000000000000000008), address(0x0000000000000000000000000000000000000006), address(0x0000000000000000000000000000000000000005), address(0x0000000000000000000000000000000000000003), address(0x0000000000000000000000000000000000000005)], [address(0x0000000000000000000000000000000000000003), address(0x0000000000000000000000000000000000000008), address(0x0000000000000000000000000000000000000006), address(0x0000000000000000000000000000000000000001), address(0x0000000000000000000000000000000000000001), address(0x0000000000000000000000000000000000000004)], [address(0x0000000000000000000000000000000000000008), address(0x0000000000000000000000000000000000000008), address(0x0000000000000000000000000000000000000002), address(0x0000000000000000000000000000000000000004), address(0x0000000000000000000000000000000000000001), address(0x0000000000000000000000000000000000000005)]];

	function compareMemoryAndStorage(address[6][] memory v1, address[6][] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (!compareMemoryAndStorage(v1[i], v2[i]))

				return false;
		return true;
	}

	function compareMemoryAndStorage(address[6] memory v1, address[6] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  constructor(bool i0) payable  {
    s0 = false;
    {
      s2.pop();
      s2[uint256(int256(57896044618658097711785492504343953926634992332820282019728792003956564819967))] = [address(0x0000000000000000000000000000000000000006), address(0x0000000000000000000000000000000000000001), address(0x0000000000000000000000000000000000000008), address(0x0000000000000000000000000000000000000001), address(0x0000000000000000000000000000000000000006), address(0x0000000000000000000000000000000000000008)];
      uint8(0);
      s2.push();
      (bool l0, bytes memory l1) = address(this).call(bytes("51f34c38d02fbd06050da755905e800eab83599ae53687375f72e3c6a690fe000000000000000000000000000000000000000000"));
    }
  }
}
// ====
// ----

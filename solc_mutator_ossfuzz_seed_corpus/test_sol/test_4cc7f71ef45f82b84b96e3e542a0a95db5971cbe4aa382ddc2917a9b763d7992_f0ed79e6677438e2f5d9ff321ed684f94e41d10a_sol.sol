==== Source:  ====

==== Source: su0.sol ====
bytes3 constant cons0 = bytes3(0xffffff);
library L0 {
  event ev0(bytes7  ep0);
  modifier m0() 
  {
    address[2] memory l0 = [address(0x0000000000000000000000000000000000000004), address(0x0000000000000000000000000000000000000006)];
    l0[uint256(0)] = address(0x0000000000000000000000000000000000000005);
    assert(l0[uint256(0)] == address(0x0000000000000000000000000000000000000005));
    unchecked {
      {
        l0[(((uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) ^ ((uint256(0) + uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) ^ uint256(70862925453152350286358322448017941575877565762538107045882163154080267044508))) * uint256(0)) & uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))] = address(bytes20(address(0x8826796Ffa5A1674EFeD943CeAC30dF16DD0081C)));
        assert(l0[(((uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) ^ ((uint256(0) + uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) ^ uint256(70862925453152350286358322448017941575877565762538107045882163154080267044508))) * uint256(0)) & uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))] == address(bytes20(address(0x8826796Ffa5A1674EFeD943CeAC30dF16DD0081C))));
      }
      {
        assembly
        {
          returndatacopy(add(0x80, mod(l0, 1024)), 115792089237316195423570985008687907853269984665640564039457584007913129639935, mod(0, 1024))
          let al0 := l0
        }
        delete l0;
        {
          uint56 l1 = (uint8(79) & ((uint8((uint8(0) / uint8(202))) >> uint232(uint232(0))) - uint8(255)));
          assembly
          {
            returndatacopy(add(0x80, mod(l0, 1024)), l0, mod(0, 1024))
            for 
            { let yulinit0 := 0 } lt(yulinit0, mod(calldataload(mod(extcodehash(0), calldatasize())), 11)) { yulinit0 := add(yulinit0, 1) }
            {
              switch l1
              default
              {
                l1 := 115792089237316195423570985008687907853269984665640564039457584007913129639935
                let al1 := l1
                return(l0, 31036853593174229586943524066667586388776228731827876710882629326862338776205)
              }
              for 
              { let yulinit1 := 0 } lt(yulinit1, mod(l1, 11)) { yulinit1 := add(yulinit1, 1) }
              {
                l1 := callcode(l1, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 26609222745980835065974426036124673538015577003009134450052118011380918326720, 27502513656383598779967530420557017421671448219198994912942390317746864820182, 89930359881487284576724460665816625142562596678973529823293419941471124549712)
              }
            }
          }
        }
        address l2 = address(0x0000000000000000000000000000000000000007);
      }
      bytes7 l3 = ((bytes7(0x00000000000000) ^ bytes7(0xa34dde7b239021)) ^ (bytes7(0x00000000000000) | bytes7(0x00000000000000)));
      bytes23 l4 = ((bytes23(0x822cc4768ba25590d5dc5a8561c379d5dcf9190667a7e0) ^ bytes23(0xffffffffffffffffffffffffffffffffffffffffffffff)) & bytes23(0x0000000000000000000000000000000000000000000000));
      bool l5 = true;
    }
    _;
  }
}
pragma solidity >= 0.0.0;
contract C0 {
  bytes18   s0 = bytes18(0x000000000000000000000000000000000000);
  int216   s1 = int216(0);
  fallback() external   
  {
    bytes18  l0 = s0;
    bytes18  l1 = l0;
    assert(l1 == s0);
  }
  using L0 for *;
  using L0 for *;
}
// ----
// Warning 9592: (su0.sol:2029-2329): "switch" statement with only a default case.

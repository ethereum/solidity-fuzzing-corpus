
==== Source: su0.sol ====
contract C0 {
  fallback() external virtual  
  {
  }
  mapping(int8 => uint144)  public s0;
  uint256   s1;
  uint128   s2;
  constructor(uint256 i0,uint128 i1) payable  {
    s1 >>= uint256((uint256(49097553311950730463810994721859596077488652502322363959133562993498121266190) / uint256(101830896772095903542616982246738921307721251536785618404279281899029585381974)));
    s2 = (uint128(340282366920938463463374607431768211455) >> uint32((uint32(816715413) + (uint32((uint32(4294967295) / uint32(0))) - uint32(4294967295)))));
    s0[int8(77)] %= (((((~(uint144(14414798361616296642814895164453727883966747))) ^ uint144(0)) & uint144(11885179502062241743713617238753672566371088)) | uint144(10280245744245741148220892625885942092927041)) * uint144(13339174990163010562473644660673656807091808));
    unchecked {
    }
  }
  receive() external   payable
  {
    uint256  l0 = s1;
    uint256  l1 = l0;
    assert(l1 == s1);
    uint128  l2 = s2;
    uint128  l3 = l2;
    assert(l3 == s2);
    uint256  l4 = s1;
    uint256  l5 = l4;
    assert(l5 == s1);
  }
}
pragma solidity >= 0.0.0;
// ====
// ----

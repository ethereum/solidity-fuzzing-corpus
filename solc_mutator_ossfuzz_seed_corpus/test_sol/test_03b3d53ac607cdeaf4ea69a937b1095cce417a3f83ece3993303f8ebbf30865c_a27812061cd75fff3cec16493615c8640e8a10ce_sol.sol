
==== Source: su0.sol ====
pragma solidity >= 0.0.0;
contract C0 {
  int232   s0 = int232(1038824217145936111473002474453239568366544327055836771643172989941607);
  uint112  public s1;
  int216   s2 = int216(52656145834278593348959013841835216159447547700274555627155488767);
  address payable   s3 = payable(address(this));
  constructor(uint112 i0)   {
    s1 >>= uint112(865029915669390515861695639096872);
    {
      unchecked {
        int216  l0 = s2;
        int216  l1 = l0;
        assert(l1 == s2);
        address payable  l2 = s3;
        address payable  l3 = l2;
        assert(l3 == s3);
        address payable  l4 = s3;
        address payable  l5 = l4;
        assert(l5 == s3);
        uint112  l6 = s1;
        uint112  l7 = l6;
        assert(l7 == s1);
      }
      int216  l8 = s2;
      int216  l9 = l8;
      assert(l9 == s2);
      address payable  l10 = s3;
      address payable  l11 = l10;
      assert(l11 == s3);
    }
  }
  function f0(uint112 i0,int216 i1,address payable i2) public    returns(address payable o0,function (int24[5][5] memory, address, bytes6) external   o1)
  {
    if (false)
    {
    }
    else if (false)
    {
      s0 -= ((true ? ((int96(22991152564760933011228995820) + int96(39614081257132168796771975167)) % int232(3450873173395281893717377931138512726225554486085193277581262111899647)) : int232(0)) - int232(3450873173395281893717377931138512726225554486085193277581262111899647));
    }
    assembly
    {
      for 
      {
        switch 115792089237316195423570985008687907853269984665640564039457584007913129639935
        default
        {
          returndatacopy(add(0x80, mod(i1, 1024)), s3.slot, mod(i0, 1024))
        }
        {
          sstore(staticcall(i0, 75507757530596102834187556976928929264524448373496809980711272100873532912858, add(0x80, mod(i1, 1024)), 0, 89047288409464351186323843314716148979546346481176801172604395958561595929458, 105132014604830242429467371867158040072280396537521682303866236291165316961881), mload(add(0x80, mod(i1, 1024))))
        }
      }
      i1
      {
        switch i2
        case 53842369524985139289601320114591607545591834556553793525854785950879958119711
        {
          extcodecopy(s2.slot, add(0x80, mod(i0, 1024)), i1, mod(s2.slot, 1024))
        }
        case 0
        {
          {
            for 
            { let yulinit0 := 0 } lt(yulinit0, mod(i1, 11)) { yulinit0 := add(yulinit0, 1) }
            {
              switch s3.offset
              case 115792089237316195423570985008687907853269984665640564039457584007913129639935
              {
                codecopy(add(0x80, mod(i1, 1024)), i1, mod(sub(s2.slot, 98628031475555835411361961647023899070183999271397609454633552398600453387360), 1024))
              }
              case 97602794334994990075739230074056530966402911213691159872020224712816487789770
              {
              }
            }
            o0 := 115792089237316195423570985008687907853269984665640564039457584007913129639935
          }
        }
        switch i1
        case 47623121272293536349496078026769574527868953150997177359520764327040630811133
        {
        }
        case 66481326557408696055331785287358305128060445177921542044612031206666149738519
        {
          switch 0
          case 115792089237316195423570985008687907853269984665640564039457584007913129639935
          {
          }
        }
      }
      {
        continue
      }
      stop()
    }
    address payable  l0 = s3;
    address payable  l1 = l0;
    assert(l1 == s3);
  }
}
// ====
// ----

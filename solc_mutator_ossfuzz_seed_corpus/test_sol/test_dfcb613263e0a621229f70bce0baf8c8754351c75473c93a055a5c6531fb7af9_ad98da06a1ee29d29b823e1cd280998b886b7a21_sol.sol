
==== Source: su0.sol ====
contract C0 {
  bytes12   s0 = bytes12(0xffffffffffffffffffffffff);
  uint256   s1 = uint256(0);
  int72[][][2]  public s2;

	function compareMemoryAndStorage(int72[][][2] memory v1, int72[][][2] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (!compareMemoryAndStorage(v1[i], v2[i]))

				return false;
		return true;
	}

	function compareMemoryAndStorage(int72[][] memory v1, int72[][] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (!compareMemoryAndStorage(v1[i], v2[i]))

				return false;
		return true;
	}

	function compareMemoryAndStorage(int72[] memory v1, int72[] storage v2) internal returns (bool) {
		if (v1.length != v2.length)
			return false;
		for (uint i = 0; i < v1.length; i++)

			if (v1[i] != v2[i])

				return false;
		return true;
	}
  constructor(int72[][][2] memory i0)   {
    s2 = i0;
    {
      (s1, i0[(uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) % ((uint256(0) + uint256(25352554807790163150527308795999114670238294898320861153931740297552203524163)) * uint256(85232572819116912360779035649620596333245680995413468580961119503898694279150)))]) = ((((uint256(41828439244889764450740450562603662979781678068264489149976966262744497639037) % ((uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) << uint128(uint128(340282366920938463463374607431768211455))) + uint256(1553215231662171210364155784764610665691440199411023620778215734857749947825))) | uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) + uint256(0)), new int72[][](3));
      assert(s1 == (((uint256(41828439244889764450740450562603662979781678068264489149976966262744497639037) % ((uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935) << uint128(uint128(340282366920938463463374607431768211455))) + uint256(1553215231662171210364155784764610665691440199411023620778215734857749947825))) | uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) + uint256(0)));
      bytes12  l0 = s0;
      bytes12  l1 = l0;
      assert(l1 == s0);
      int72[][][2] memory l2 = s2;
      int72[][][2] memory l3 = l2;
      assert(compareMemoryAndStorage(l3, s2));
    }
  }
  modifier m0(address payable i0) virtual
  {
    _;
  }
  fallback() external virtual m0(payable(address(this))) 
  {
    (s2[(((uint216((int216(45971786967416492599577035666811979018590786430927855539357699515) - int216(24006703177800203544865353521279962711881622828518843554634183087))) | uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) - uint256(105655729515025092230512996075079408897967097265719049535270785758297707322846)) % uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935))]) = (new int72[][](3));
    delete s1;
    bytes12  l0 = s0;
    bytes12  l1 = l0;
    assert(l1 == s0);
    (s2[uint256(0)], s2[(((uint256(112393864354328307106952257745788759440219616123467243987607733603267273462686) << uint128(((uint128(340282366920938463463374607431768211455) & uint128(0)) % uint128(13460061125046949191206872935059662541)))) | uint256(0)) - uint256(0))]) = (new int72[][](3), new int72[][](3));
  }
}
pragma solidity >= 0.0.0;
// ====
// ----

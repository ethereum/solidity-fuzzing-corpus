
==== Source: su0.sol ====
error er0(bytes21 ep0, bytes23 ep1);
function f0(uint192 i0,string[8] memory i1)      returns(bool o0,int48 o1){
  if (i0 <= uint192(6277101735386680763835789423207666416102355444464034512895))
  {
    if (i1.length >= i1.length)
    {
      o1 = ((int48(55988675299929) & ((0x0000000000000000000000000000000000000000 f1 /*suffix expr*/ ^ int48(140737488355327)) + int48(140737488355327))) | int48(140737488355327));
      assert(o1 == ((int48(55988675299929) & ((0x0000000000000000000000000000000000000000 f1 /*suffix expr*/ ^ int48(140737488355327)) + int48(140737488355327))) | int48(140737488355327)));
    }
  }
  else
  {
    require(true);
    if (i0 > (((true ? (uint192(6092902829744277031179824984125242482099605294596331935519) ^ uint192(3259138376570546241601126623038265914658824158543396869089)) : uint192(6277101735386680763835789423207666416102355444464034512895)) % uint192(6277101735386680763835789423207666416102355444464034512895)) & uint192(0)))
    {
      revert er0(bytes21(0xffffffffffffffffffffffffffffffffffffffffff), bytes23(0x0000000000000000000000000000000000000000000000));
    }
  }
}
error er1(string[7] ep0);
pragma solidity >= 0.0.0;
function f1(address i0) pure suffix  returns(int48 o0)
{
}
function f2(bool i0) pure suffix  returns(uint256 o0)
{
}

==== Source: su1.sol ====
pragma solidity >= 0.0.0;
contract C0 {
  int32 public constant cons0 = 1224221080;
  struct St0 {
    uint24 el0;
    uint256 el1;
    bytes14 el2;
  }
  function f3() public      {
    if (true)
    {
      return;
    }
  }
  uint232   s0;
  uint72 immutable public s1;
  bytes6   s2 = bytes6(0x17d04339d3af);
  int208   s3;
  constructor(uint232 i0,uint72 i1,int208 i2)   {
    s0 |= ((i0 ^= ((((170141183460469231731687303715884105727 f4 /*suffix expr*/ % (uint232(6901746346790563787434755862277025452451108972170386555162524223799295) | uint232(0))) - uint232(0)) - uint232(5236475829173314167450115485291857664154347226985220002866256016599041)) + uint232(2672459279555910125562143139559215386165203928035504482477918920348724))) | ((~(((true ? uint232(0) : uint232(6901746346790563787434755862277025452451108972170386555162524223799295)) + uint232(6901746346790563787434755862277025452451108972170386555162524223799295)))) | uint232(5471033819808574367525990307500761393734672118864438973585285792580851)));
    s1 = (uint72(0) | uint72(4722366482869645213695));
    s3 *= (true ? int208(-10054906806240156492561021647887396895194004199904343694322418) : (int208(-141301005467148560308257275785278779731106968873820550507038690) % (int208(205688069665150755269371147819668813122841983204197482918576127) + int208(0))));
    unchecked {
    }
  }
  receive() external virtual  payable
  {
    uint232  l0 = s0;
    uint232  l1 = l0;
    assert(l1 == s0);
  }
  function f6(int208 i0,int208 i1) private     returns(int40 o0)  {
    (bool l0, bytes memory l1) = address(this).call(abi.encodeWithSignature("f3()"));
  }
}
function f4(int128 i0) pure suffix  returns(uint232 o0)
{
  if (i0 == ((-(int128(170141183460469231731687303715884105727))) * int128(((int128((int128(0) / int128(28017941824559524831276980804449089674))) | int128(170141183460469231731687303715884105727)) / int128(0)))))
  {
    return ((uint232(5849508939830217848430066232250233838708124797083414837945797543293575) + uint232(0)));
  }
}
// ====
// ----

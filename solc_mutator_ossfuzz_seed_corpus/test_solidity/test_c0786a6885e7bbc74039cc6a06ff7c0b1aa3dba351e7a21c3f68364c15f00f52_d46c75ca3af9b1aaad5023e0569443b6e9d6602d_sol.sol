
==== Source: su0.sol ====
enum EN0 {
  M0, M1, M2, M3, M4, M5, M6, M7,
  M8, M9, M10, M11, M12, M13, M14, M15,
  M16, M17, M18, M19, M20, M21, M22, M23,
  M24, M25, M26, M27, M28, M29, M30, M31,
  M32, M33, M34, M35, M36, M37, M38, M39,
  M40, M41, M42, M43, M44, M45, M46, M47,
  M48, M49, M50, M51, M52, M53, M54, M55,
  M56, M57, M58, M59, M60, M61, M62, M63,
  M64, M65, M66, M67, M68, M69, M70, M71,
  M72, M73, M74, M75, M76
}
struct St0 {
  EN0 el0;
  uint16 el1;
}
function f0(string memory i0)      returns(St0 memory o0,address payable o1,uint232 o2){
  if (bytes(i0).length == uint256(54851748253393009319037290228628548107989522996494453331394262636815420018246))
  {
    o2 = (((uint232(((uint232((uint232(0) / uint232(0))) ^ uint232(0)) / uint232(6901746346790563787434755862277025452451108972170386555162524223799295))) - uint232(6901746346790563787434755862277025452451108972170386555162524223799295)) | uint232(0)) & uint232(6901746346790563787434755862277025452451108972170386555162524223799295));
    assert(o2 == (((uint232(((uint232((uint232(0) / uint232(0))) ^ uint232(0)) / uint232(6901746346790563787434755862277025452451108972170386555162524223799295))) - uint232(6901746346790563787434755862277025452451108972170386555162524223799295)) | uint232(0)) & uint232(6901746346790563787434755862277025452451108972170386555162524223799295)));
  }
  return (St0(EN0(uint8(124)), uint16(43452)), payable(address(0x0000000000000000000000000000000000000008)), (~((uint80(EN0(uint8(61))) & uint80(137847410449402534031238)))));
}
function f1(uint80 i0,bool[5] memory i1)     {
  return;
}
pragma solidity >= 0.0.0;

==== Source: su1.sol ====
struct St1 {
  bool[7] el0;
}
pragma solidity >= 0.0.0;
enum EN1 {
  M0, M1, M2, M3, M4, M5, M6, M7,
  M8, M9, M10, M11, M12, M13, M14, M15,
  M16, M17, M18, M19, M20, M21, M22, M23,
  M24, M25, M26, M27, M28, M29, M30, M31,
  M32, M33, M34, M35, M36, M37, M38, M39,
  M40, M41, M42, M43, M44, M45, M46, M47,
  M48, M49, M50, M51, M52, M53, M54, M55,
  M56, M57, M58, M59, M60, M61, M62, M63,
  M64
}
// ====
// ----

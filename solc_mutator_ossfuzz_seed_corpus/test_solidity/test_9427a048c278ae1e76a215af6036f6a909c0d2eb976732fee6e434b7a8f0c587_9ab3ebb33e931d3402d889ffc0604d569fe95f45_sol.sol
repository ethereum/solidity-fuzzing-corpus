
==== Source: su0.sol ====
bytes1 constant cons0 = bytes1(0xff);
contract C0 {
  receive() external virtual  payable
  {
    assembly
    {
      switch 0
      case 0
      {
        for 
        {
          switch 115792089237316195423570985008687907853269984665640564039457584007913129639935
          default
          {
            stop()
            if cons0
            {
              return(cons0, cons0)
            }
          }
          let al0 := cons0
        }
        115792089237316195423570985008687907853269984665640564039457584007913129639935
        {
          if cons0
          {
            for 
            {
            }
            cons0
            {
              return(cons0, cons0)
            }
            {
            }
          }
        }
        {
        }
      }
      for 
      {
        return(115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935)
      }
      cons0
      {
        switch cons0
        default
        {
          let al1 := cons0
        }
        if cons0
        {
        }
      }
      {
        for 
        {
          selfdestruct(calldataload(mod(cons0, calldatasize())))
          let al2 := 0
        }
        mload(mod(create(8746117471966395261974164613504882472279351856640882636093223644770824539619, 108747144579303392401206354862140561634439658324825988858946275171466076314622, 115792089237316195423570985008687907853269984665640564039457584007913129639935), 2048))
        {
        }
        {
          function af0(ai0) -> ao0, ao1, ao2, ao3
          {
            ai0 := calldataload(mod(115792089237316195423570985008687907853269984665640564039457584007913129639935, calldatasize()))
            ao0 := 0
            pop(87681591433429764443792438213006804090969835629367162457560436079061315408382)
          }
          if delegatecall(0, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 0, 40748188141439321346934296453431054076082555405484769785307591347204403006260, 51605265988671342589516139355257135157529651653551516245983026481893136165611, 86759869060833662608466217807174459316398073292262649192265268111560051642506)
          {
            continue
            mstore8(mod(calldataload(mod(54316566968434882896077900397402819436354445580543474358144396512602121407745, calldatasize())), 2048), mul(64299789903465126588628025152522322579399941000707410923917247924820450385505, 0))
          }
          continue
          break
          continue
        }
      }
      if 0
      {
        return(cons0, cons0)
      }
    }
  }
  modifier m0() virtual
  {
    _;
  }
  bool   s0;
  bool   s1;
  mapping(address => address)   s2;
  constructor(bool i0,bool i1) payable  {
    s0 = true;
    s1 = false;
    s2[address(this)] = address(this);
    {
      if ((false && true))
      {
      }
      else if (((uint24(0) << uint256((((uint256(0) - uint256(101263907133076357970991073056198217012646423151437094169501670814257164563928)) * uint256(115792089237316195423570985008687907853269984665640564039457584007913129639935)) | uint256(49788218306031685520470014103874289594978503207458779958339165621205838063782)))) != uint24(16777215)))
      {
        address payable[2] storage l0;
      }
      else
      {
        if ((false || false))
        {
        }
        else if (false)
        {
          revert("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
        }
        else if ((true || true))
        {
        }
      }
    }
  }
  struct St0 {
    address el0;
    bytes32 el1;
    uint224 el2;
  }
  modifier m1() virtual
  {
    if (true)
    {
      _;
    }
    else
    {
      (bool l0, bytes memory l1) = payable(this).call{value: 7424976737012377421}("");
    }
    _;
  }
}
pragma solidity >= 0.0.0;
struct St1 {
  int256 el0;
  bool el1;
  uint144 el2;
}
// ====
// ----

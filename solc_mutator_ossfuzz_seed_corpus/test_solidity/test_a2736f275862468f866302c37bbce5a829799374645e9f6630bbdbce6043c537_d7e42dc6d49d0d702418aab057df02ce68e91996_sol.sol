
==== Source: su0.sol ====
error er0(address ep0, bool ep1);
type T0 is address;
enum EN0 {
  M0, M1, M2, M3, M4
}
library L0 {
  int144 public constant cons0 = (int144(((~(((int144(0) % int144(-10215493338092035466928643270739205117379930)) % int144(0)))) / int144(10534997276969066901530310319096633886037873))) ** uint200(uint200(430055590728290585447847542443686940460396454040830966558038)));
  error er1(uint120 ep0);
  using L0 for *;
  error er2(address ep0);
  function f0() public    returns(address payable o0)
  {
    assembly
    {
    }
    for(;
;
(~(int192(3138550867693340381917894711603833208051177722232017256447))))
    {
      if (false)
      {
        address l0 = address(ripemd160("0000000000f70310b943174e8b35caabd4703d"));
      }
      break;
      revert L0.er1((((uint120(1329227995784915872903807060280344575) * uint120(0)) % (uint120(132040038670538198957564023258073822) | uint120(0))) >> uint208(uint208(411376139330301510538742295639337626245683966408394965837152255))));
    }
  }
  type T1 is bool;
  enum EN1 {
    M0, M1, M2, M3, M4, M5, M6, M7,
    M8, M9, M10, M11, M12, M13, M14, M15,
    M16, M17, M18, M19, M20, M21, M22, M23,
    M24, M25, M26, M27, M28, M29, M30, M31,
    M32, M33, M34, M35, M36, M37, M38, M39,
    M40, M41, M42, M43, M44, M45, M46, M47,
    M48, M49, M50, M51, M52, M53, M54, M55,
    M56, M57, M58, M59, M60, M61, M62, M63,
    M64, M65, M66, M67, M68, M69, M70, M71,
    M72, M73, M74, M75, M76, M77, M78, M79,
    M80, M81, M82, M83, M84, M85, M86, M87,
    M88, M89, M90, M91, M92, M93, M94, M95,
    M96, M97, M98, M99, M100, M101, M102, M103,
    M104, M105, M106, M107, M108, M109, M110, M111,
    M112, M113, M114, M115, M116, M117, M118, M119,
    M120, M121, M122, M123, M124, M125, M126, M127,
    M128, M129, M130, M131, M132, M133, M134, M135,
    M136, M137, M138, M139, M140, M141, M142, M143,
    M144, M145, M146, M147, M148, M149, M150
  }
}
pragma solidity >= 0.0.0;
// ====
// ----
